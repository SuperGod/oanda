// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClientPrice The specification of an Account-specific Price.
// swagger:model ClientPrice
type ClientPrice struct {

	// The list of prices and liquidity available on the Instrument's ask side. It is possible for this list to be empty if there is no ask liquidity currently available for the Instrument in the Account.
	Asks []*PriceBucket `json:"asks"`

	// The list of prices and liquidity available on the Instrument's bid side. It is possible for this list to be empty if there is no bid liquidity currently available for the Instrument in the Account.
	Bids []*PriceBucket `json:"bids"`

	// The closeout ask Price. This Price is used when a ask is required to closeout a Position (margin closeout or manual) yet there is no ask liquidity. The closeout ask is never used to open a new position.
	CloseoutAsk string `json:"closeoutAsk,omitempty"`

	// The closeout bid Price. This Price is used when a bid is required to closeout a Position (margin closeout or manual) yet there is no bid liquidity. The closeout bid is never used to open a new position.
	CloseoutBid string `json:"closeoutBid,omitempty"`

	// The Price's Instrument.
	Instrument string `json:"instrument,omitempty"`

	// quote home conversion factors
	QuoteHomeConversionFactors *QuoteHomeConversionFactors `json:"quoteHomeConversionFactors,omitempty"`

	// The status of the Price.
	// Enum: [tradeable non-tradeable invalid]
	Status string `json:"status,omitempty"`

	// The date/time when the Price was created
	Time string `json:"time,omitempty"`

	// Flag indicating if the Price is tradeable or not
	Tradeable bool `json:"tradeable,omitempty"`

	// The string "PRICE". Used to identify the a Price object when found in a stream.
	Type string `json:"type,omitempty"`

	// units available
	UnitsAvailable *UnitsAvailable `json:"unitsAvailable,omitempty"`
}

// Validate validates this client price
func (m *ClientPrice) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAsks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBids(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuoteHomeConversionFactors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnitsAvailable(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClientPrice) validateAsks(formats strfmt.Registry) error {

	if swag.IsZero(m.Asks) { // not required
		return nil
	}

	for i := 0; i < len(m.Asks); i++ {
		if swag.IsZero(m.Asks[i]) { // not required
			continue
		}

		if m.Asks[i] != nil {
			if err := m.Asks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("asks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClientPrice) validateBids(formats strfmt.Registry) error {

	if swag.IsZero(m.Bids) { // not required
		return nil
	}

	for i := 0; i < len(m.Bids); i++ {
		if swag.IsZero(m.Bids[i]) { // not required
			continue
		}

		if m.Bids[i] != nil {
			if err := m.Bids[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("bids" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClientPrice) validateQuoteHomeConversionFactors(formats strfmt.Registry) error {

	if swag.IsZero(m.QuoteHomeConversionFactors) { // not required
		return nil
	}

	if m.QuoteHomeConversionFactors != nil {
		if err := m.QuoteHomeConversionFactors.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quoteHomeConversionFactors")
			}
			return err
		}
	}

	return nil
}

var clientPriceTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["tradeable","non-tradeable","invalid"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clientPriceTypeStatusPropEnum = append(clientPriceTypeStatusPropEnum, v)
	}
}

const (

	// ClientPriceStatusTradeable captures enum value "tradeable"
	ClientPriceStatusTradeable string = "tradeable"

	// ClientPriceStatusNonTradeable captures enum value "non-tradeable"
	ClientPriceStatusNonTradeable string = "non-tradeable"

	// ClientPriceStatusInvalid captures enum value "invalid"
	ClientPriceStatusInvalid string = "invalid"
)

// prop value enum
func (m *ClientPrice) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, clientPriceTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ClientPrice) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *ClientPrice) validateUnitsAvailable(formats strfmt.Registry) error {

	if swag.IsZero(m.UnitsAvailable) { // not required
		return nil
	}

	if m.UnitsAvailable != nil {
		if err := m.UnitsAvailable.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unitsAvailable")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClientPrice) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClientPrice) UnmarshalBinary(b []byte) error {
	var res ClientPrice
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
