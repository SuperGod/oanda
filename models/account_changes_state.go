// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// AccountChangesState An AccountState Object is used to represent an Account's current price-dependent state. Price-dependent Account state is dependent on OANDA's current Prices, and includes things like unrealized PL, NAV and Trailing Stop Loss Order state.
// swagger:model AccountChangesState
type AccountChangesState struct {

	// The net asset value of the Account. Equal to Account balance + unrealizedPL.
	NAV string `json:"NAV,omitempty"`

	// Margin available for Account currency.
	MarginAvailable string `json:"marginAvailable,omitempty"`

	// The Account's margin call margin used.
	MarginCallMarginUsed string `json:"marginCallMarginUsed,omitempty"`

	// The Account's margin call percentage. When this value is 1.0 or above the Account is in a margin call situation.
	MarginCallPercent string `json:"marginCallPercent,omitempty"`

	// The Account's margin closeout margin used.
	MarginCloseoutMarginUsed string `json:"marginCloseoutMarginUsed,omitempty"`

	// The Account's margin closeout NAV.
	MarginCloseoutNAV string `json:"marginCloseoutNAV,omitempty"`

	// The Account's margin closeout percentage. When this value is 1.0 or above the Account is in a margin closeout situation.
	MarginCloseoutPercent string `json:"marginCloseoutPercent,omitempty"`

	// The value of the Account's open positions as used for margin closeout calculations represented in the Account's home currency.
	MarginCloseoutPositionValue string `json:"marginCloseoutPositionValue,omitempty"`

	// The Account's margin closeout unrealized PL.
	MarginCloseoutUnrealizedPL string `json:"marginCloseoutUnrealizedPL,omitempty"`

	// Margin currently used for the Account.
	MarginUsed string `json:"marginUsed,omitempty"`

	// The price-dependent state of each pending Order in the Account.
	Orders []*DynamicOrderState `json:"orders"`

	// The value of the Account's open positions represented in the Account's home currency.
	PositionValue string `json:"positionValue,omitempty"`

	// The price-dependent state for each open Position in the Account.
	Positions []*CalculatedPositionState `json:"positions"`

	// The price-dependent state for each open Trade in the Account.
	Trades []*CalculatedTradeState `json:"trades"`

	// The total unrealized profit/loss for all Trades currently open in the Account.
	UnrealizedPL string `json:"unrealizedPL,omitempty"`

	// The current WithdrawalLimit for the account which will be zero or a positive value indicating how much can be withdrawn from the account.
	WithdrawalLimit string `json:"withdrawalLimit,omitempty"`
}

// Validate validates this account changes state
func (m *AccountChangesState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOrders(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePositions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrades(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountChangesState) validateOrders(formats strfmt.Registry) error {

	if swag.IsZero(m.Orders) { // not required
		return nil
	}

	for i := 0; i < len(m.Orders); i++ {
		if swag.IsZero(m.Orders[i]) { // not required
			continue
		}

		if m.Orders[i] != nil {
			if err := m.Orders[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("orders" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AccountChangesState) validatePositions(formats strfmt.Registry) error {

	if swag.IsZero(m.Positions) { // not required
		return nil
	}

	for i := 0; i < len(m.Positions); i++ {
		if swag.IsZero(m.Positions[i]) { // not required
			continue
		}

		if m.Positions[i] != nil {
			if err := m.Positions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("positions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AccountChangesState) validateTrades(formats strfmt.Registry) error {

	if swag.IsZero(m.Trades) { // not required
		return nil
	}

	for i := 0; i < len(m.Trades); i++ {
		if swag.IsZero(m.Trades[i]) { // not required
			continue
		}

		if m.Trades[i] != nil {
			if err := m.Trades[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("trades" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccountChangesState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountChangesState) UnmarshalBinary(b []byte) error {
	var res AccountChangesState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
