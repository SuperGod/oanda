// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// GuaranteedStopLossOrderEntryData Details required by clients creating a Guaranteed Stop Loss Order
// swagger:model GuaranteedStopLossOrderEntryData
type GuaranteedStopLossOrderEntryData struct {

	// level restriction
	LevelRestriction *GuaranteedStopLossOrderLevelRestriction `json:"levelRestriction,omitempty"`

	// The minimum distance allowed between the Trade's fill price and the configured price for guaranteed Stop Loss Orders created for this instrument. Specified in price units.
	MinimumDistance string `json:"minimumDistance,omitempty"`

	// The amount that is charged to the account if a guaranteed Stop Loss Order is triggered and filled. The value is in price units and is charged for each unit of the Trade.
	Premium string `json:"premium,omitempty"`
}

// Validate validates this guaranteed stop loss order entry data
func (m *GuaranteedStopLossOrderEntryData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLevelRestriction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GuaranteedStopLossOrderEntryData) validateLevelRestriction(formats strfmt.Registry) error {

	if swag.IsZero(m.LevelRestriction) { // not required
		return nil
	}

	if m.LevelRestriction != nil {
		if err := m.LevelRestriction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("levelRestriction")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GuaranteedStopLossOrderEntryData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GuaranteedStopLossOrderEntryData) UnmarshalBinary(b []byte) error {
	var res GuaranteedStopLossOrderEntryData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
