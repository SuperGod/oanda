// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// OrderTriggerCondition Specification of which price component should be used when determining if an Order should be triggered and filled. This allows Orders to be triggered based on the bid, ask, mid, default (ask for buy, bid for sell) or inverse (ask for sell, bid for buy) price depending on the desired behaviour. Orders are always filled using their default price component.
// This feature is only provided through the REST API. Clients who choose to specify a non-default trigger condition will not see it reflected in any of OANDA's proprietary or partner trading platforms, their transaction history or their account statements. OANDA platforms always assume that an Order's trigger condition is set to the default value when indicating the distance from an Order's trigger price, and will always provide the default trigger condition when creating or modifying an Order.
// A special restriction applies when creating a guaranteed Stop Loss Order. In this case the TriggerCondition value must either be "DEFAULT", or the "natural" trigger side "DEFAULT" results in. So for a Stop Loss Order for a long trade valid values are "DEFAULT" and "BID", and for short trades "DEFAULT" and "ASK" are valid.
// swagger:model OrderTriggerCondition
type OrderTriggerCondition string

const (

	// OrderTriggerConditionDEFAULT captures enum value "DEFAULT"
	OrderTriggerConditionDEFAULT OrderTriggerCondition = "DEFAULT"

	// OrderTriggerConditionINVERSE captures enum value "INVERSE"
	OrderTriggerConditionINVERSE OrderTriggerCondition = "INVERSE"

	// OrderTriggerConditionBID captures enum value "BID"
	OrderTriggerConditionBID OrderTriggerCondition = "BID"

	// OrderTriggerConditionASK captures enum value "ASK"
	OrderTriggerConditionASK OrderTriggerCondition = "ASK"

	// OrderTriggerConditionMID captures enum value "MID"
	OrderTriggerConditionMID OrderTriggerCondition = "MID"
)

// for schema
var orderTriggerConditionEnum []interface{}

func init() {
	var res []OrderTriggerCondition
	if err := json.Unmarshal([]byte(`["DEFAULT","INVERSE","BID","ASK","MID"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		orderTriggerConditionEnum = append(orderTriggerConditionEnum, v)
	}
}

func (m OrderTriggerCondition) validateOrderTriggerConditionEnum(path, location string, value OrderTriggerCondition) error {
	if err := validate.Enum(path, location, value, orderTriggerConditionEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this order trigger condition
func (m OrderTriggerCondition) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOrderTriggerConditionEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
