// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// AccountChanges An AccountChanges Object is used to represent the changes to an Account's Orders, Trades and Positions since a specified Account TransactionID in the past.
// swagger:model AccountChanges
type AccountChanges struct {

	// The Orders cancelled.
	OrdersCancelled []*Order `json:"ordersCancelled"`

	// The Orders created. These Orders may have been filled, cancelled or triggered in the same period.
	OrdersCreated []*Order `json:"ordersCreated"`

	// The Orders filled.
	OrdersFilled []*Order `json:"ordersFilled"`

	// The Orders triggered.
	OrdersTriggered []*Order `json:"ordersTriggered"`

	// The Positions changed.
	Positions []*Position `json:"positions"`

	// The Trades closed.
	TradesClosed []*TradeSummary `json:"tradesClosed"`

	// The Trades opened.
	TradesOpened []*TradeSummary `json:"tradesOpened"`

	// The Trades reduced.
	TradesReduced []*TradeSummary `json:"tradesReduced"`

	// The Transactions that have been generated.
	Transactions []*Transaction `json:"transactions"`
}

// Validate validates this account changes
func (m *AccountChanges) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOrdersCancelled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrdersCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrdersFilled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrdersTriggered(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePositions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTradesClosed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTradesOpened(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTradesReduced(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountChanges) validateOrdersCancelled(formats strfmt.Registry) error {

	if swag.IsZero(m.OrdersCancelled) { // not required
		return nil
	}

	for i := 0; i < len(m.OrdersCancelled); i++ {
		if swag.IsZero(m.OrdersCancelled[i]) { // not required
			continue
		}

		if m.OrdersCancelled[i] != nil {
			if err := m.OrdersCancelled[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ordersCancelled" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AccountChanges) validateOrdersCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.OrdersCreated) { // not required
		return nil
	}

	for i := 0; i < len(m.OrdersCreated); i++ {
		if swag.IsZero(m.OrdersCreated[i]) { // not required
			continue
		}

		if m.OrdersCreated[i] != nil {
			if err := m.OrdersCreated[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ordersCreated" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AccountChanges) validateOrdersFilled(formats strfmt.Registry) error {

	if swag.IsZero(m.OrdersFilled) { // not required
		return nil
	}

	for i := 0; i < len(m.OrdersFilled); i++ {
		if swag.IsZero(m.OrdersFilled[i]) { // not required
			continue
		}

		if m.OrdersFilled[i] != nil {
			if err := m.OrdersFilled[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ordersFilled" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AccountChanges) validateOrdersTriggered(formats strfmt.Registry) error {

	if swag.IsZero(m.OrdersTriggered) { // not required
		return nil
	}

	for i := 0; i < len(m.OrdersTriggered); i++ {
		if swag.IsZero(m.OrdersTriggered[i]) { // not required
			continue
		}

		if m.OrdersTriggered[i] != nil {
			if err := m.OrdersTriggered[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ordersTriggered" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AccountChanges) validatePositions(formats strfmt.Registry) error {

	if swag.IsZero(m.Positions) { // not required
		return nil
	}

	for i := 0; i < len(m.Positions); i++ {
		if swag.IsZero(m.Positions[i]) { // not required
			continue
		}

		if m.Positions[i] != nil {
			if err := m.Positions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("positions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AccountChanges) validateTradesClosed(formats strfmt.Registry) error {

	if swag.IsZero(m.TradesClosed) { // not required
		return nil
	}

	for i := 0; i < len(m.TradesClosed); i++ {
		if swag.IsZero(m.TradesClosed[i]) { // not required
			continue
		}

		if m.TradesClosed[i] != nil {
			if err := m.TradesClosed[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tradesClosed" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AccountChanges) validateTradesOpened(formats strfmt.Registry) error {

	if swag.IsZero(m.TradesOpened) { // not required
		return nil
	}

	for i := 0; i < len(m.TradesOpened); i++ {
		if swag.IsZero(m.TradesOpened[i]) { // not required
			continue
		}

		if m.TradesOpened[i] != nil {
			if err := m.TradesOpened[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tradesOpened" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AccountChanges) validateTradesReduced(formats strfmt.Registry) error {

	if swag.IsZero(m.TradesReduced) { // not required
		return nil
	}

	for i := 0; i < len(m.TradesReduced); i++ {
		if swag.IsZero(m.TradesReduced[i]) { // not required
			continue
		}

		if m.TradesReduced[i] != nil {
			if err := m.TradesReduced[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tradesReduced" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AccountChanges) validateTransactions(formats strfmt.Registry) error {

	if swag.IsZero(m.Transactions) { // not required
		return nil
	}

	for i := 0; i < len(m.Transactions); i++ {
		if swag.IsZero(m.Transactions[i]) { // not required
			continue
		}

		if m.Transactions[i] != nil {
			if err := m.Transactions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transactions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccountChanges) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountChanges) UnmarshalBinary(b []byte) error {
	var res AccountChanges
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
