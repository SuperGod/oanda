// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StopLossOrderRequest A StopLossOrderRequest specifies the parameters that may be set when creating a Stop Loss Order. Only one of the price and distance fields may be specified.
// swagger:model StopLossOrderRequest
type StopLossOrderRequest struct {

	// client extensions
	ClientExtensions *ClientExtensions `json:"clientExtensions,omitempty"`

	// The client ID of the Trade to be closed when the price threshold is breached.
	ClientTradeID string `json:"clientTradeID,omitempty"`

	// Specifies the distance (in price units) from the Account's current price to use as the Stop Loss Order price. If the Trade is short the Instrument's bid price is used, and for long Trades the ask is used.
	Distance string `json:"distance,omitempty"`

	// The date/time when the StopLoss Order will be cancelled if its timeInForce is "GTD".
	GtdTime string `json:"gtdTime,omitempty"`

	// Flag indicating that the Stop Loss Order is guaranteed. The default value depends on the GuaranteedStopLossOrderMode of the account, if it is REQUIRED, the default will be true, for DISABLED or ENABLED the default is false.
	Guaranteed bool `json:"guaranteed,omitempty"`

	// The price threshold specified for the Stop Loss Order. If the guaranteed flag is false, the associated Trade will be closed by a market price that is equal to or worse than this threshold. If the flag is true the associated Trade will be closed at this price.
	Price string `json:"price,omitempty"`

	// The time-in-force requested for the StopLoss Order. Restricted to "GTC", "GFD" and "GTD" for StopLoss Orders.
	// Enum: [GTC GTD GFD FOK IOC]
	TimeInForce string `json:"timeInForce,omitempty"`

	// The ID of the Trade to close when the price threshold is breached.
	TradeID string `json:"tradeID,omitempty"`

	// Specification of which price component should be used when determining if an Order should be triggered and filled. This allows Orders to be triggered based on the bid, ask, mid, default (ask for buy, bid for sell) or inverse (ask for sell, bid for buy) price depending on the desired behaviour. Orders are always filled using their default price component.
	// This feature is only provided through the REST API. Clients who choose to specify a non-default trigger condition will not see it reflected in any of OANDA's proprietary or partner trading platforms, their transaction history or their account statements. OANDA platforms always assume that an Order's trigger condition is set to the default value when indicating the distance from an Order's trigger price, and will always provide the default trigger condition when creating or modifying an Order.
	// A special restriction applies when creating a guaranteed Stop Loss Order. In this case the TriggerCondition value must either be "DEFAULT", or the "natural" trigger side "DEFAULT" results in. So for a Stop Loss Order for a long trade valid values are "DEFAULT" and "BID", and for short trades "DEFAULT" and "ASK" are valid.
	// Enum: [DEFAULT INVERSE BID ASK MID]
	TriggerCondition string `json:"triggerCondition,omitempty"`

	// The type of the Order to Create. Must be set to "STOP_LOSS" when creating a Stop Loss Order.
	// Enum: [MARKET LIMIT STOP MARKET_IF_TOUCHED TAKE_PROFIT STOP_LOSS TRAILING_STOP_LOSS FIXED_PRICE]
	Type string `json:"type,omitempty"`
}

// Validate validates this stop loss order request
func (m *StopLossOrderRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClientExtensions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeInForce(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTriggerCondition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StopLossOrderRequest) validateClientExtensions(formats strfmt.Registry) error {

	if swag.IsZero(m.ClientExtensions) { // not required
		return nil
	}

	if m.ClientExtensions != nil {
		if err := m.ClientExtensions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clientExtensions")
			}
			return err
		}
	}

	return nil
}

var stopLossOrderRequestTypeTimeInForcePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["GTC","GTD","GFD","FOK","IOC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		stopLossOrderRequestTypeTimeInForcePropEnum = append(stopLossOrderRequestTypeTimeInForcePropEnum, v)
	}
}

const (

	// StopLossOrderRequestTimeInForceGTC captures enum value "GTC"
	StopLossOrderRequestTimeInForceGTC string = "GTC"

	// StopLossOrderRequestTimeInForceGTD captures enum value "GTD"
	StopLossOrderRequestTimeInForceGTD string = "GTD"

	// StopLossOrderRequestTimeInForceGFD captures enum value "GFD"
	StopLossOrderRequestTimeInForceGFD string = "GFD"

	// StopLossOrderRequestTimeInForceFOK captures enum value "FOK"
	StopLossOrderRequestTimeInForceFOK string = "FOK"

	// StopLossOrderRequestTimeInForceIOC captures enum value "IOC"
	StopLossOrderRequestTimeInForceIOC string = "IOC"
)

// prop value enum
func (m *StopLossOrderRequest) validateTimeInForceEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, stopLossOrderRequestTypeTimeInForcePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StopLossOrderRequest) validateTimeInForce(formats strfmt.Registry) error {

	if swag.IsZero(m.TimeInForce) { // not required
		return nil
	}

	// value enum
	if err := m.validateTimeInForceEnum("timeInForce", "body", m.TimeInForce); err != nil {
		return err
	}

	return nil
}

var stopLossOrderRequestTypeTriggerConditionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DEFAULT","INVERSE","BID","ASK","MID"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		stopLossOrderRequestTypeTriggerConditionPropEnum = append(stopLossOrderRequestTypeTriggerConditionPropEnum, v)
	}
}

const (

	// StopLossOrderRequestTriggerConditionDEFAULT captures enum value "DEFAULT"
	StopLossOrderRequestTriggerConditionDEFAULT string = "DEFAULT"

	// StopLossOrderRequestTriggerConditionINVERSE captures enum value "INVERSE"
	StopLossOrderRequestTriggerConditionINVERSE string = "INVERSE"

	// StopLossOrderRequestTriggerConditionBID captures enum value "BID"
	StopLossOrderRequestTriggerConditionBID string = "BID"

	// StopLossOrderRequestTriggerConditionASK captures enum value "ASK"
	StopLossOrderRequestTriggerConditionASK string = "ASK"

	// StopLossOrderRequestTriggerConditionMID captures enum value "MID"
	StopLossOrderRequestTriggerConditionMID string = "MID"
)

// prop value enum
func (m *StopLossOrderRequest) validateTriggerConditionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, stopLossOrderRequestTypeTriggerConditionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StopLossOrderRequest) validateTriggerCondition(formats strfmt.Registry) error {

	if swag.IsZero(m.TriggerCondition) { // not required
		return nil
	}

	// value enum
	if err := m.validateTriggerConditionEnum("triggerCondition", "body", m.TriggerCondition); err != nil {
		return err
	}

	return nil
}

var stopLossOrderRequestTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MARKET","LIMIT","STOP","MARKET_IF_TOUCHED","TAKE_PROFIT","STOP_LOSS","TRAILING_STOP_LOSS","FIXED_PRICE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		stopLossOrderRequestTypeTypePropEnum = append(stopLossOrderRequestTypeTypePropEnum, v)
	}
}

const (

	// StopLossOrderRequestTypeMARKET captures enum value "MARKET"
	StopLossOrderRequestTypeMARKET string = "MARKET"

	// StopLossOrderRequestTypeLIMIT captures enum value "LIMIT"
	StopLossOrderRequestTypeLIMIT string = "LIMIT"

	// StopLossOrderRequestTypeSTOP captures enum value "STOP"
	StopLossOrderRequestTypeSTOP string = "STOP"

	// StopLossOrderRequestTypeMARKETIFTOUCHED captures enum value "MARKET_IF_TOUCHED"
	StopLossOrderRequestTypeMARKETIFTOUCHED string = "MARKET_IF_TOUCHED"

	// StopLossOrderRequestTypeTAKEPROFIT captures enum value "TAKE_PROFIT"
	StopLossOrderRequestTypeTAKEPROFIT string = "TAKE_PROFIT"

	// StopLossOrderRequestTypeSTOPLOSS captures enum value "STOP_LOSS"
	StopLossOrderRequestTypeSTOPLOSS string = "STOP_LOSS"

	// StopLossOrderRequestTypeTRAILINGSTOPLOSS captures enum value "TRAILING_STOP_LOSS"
	StopLossOrderRequestTypeTRAILINGSTOPLOSS string = "TRAILING_STOP_LOSS"

	// StopLossOrderRequestTypeFIXEDPRICE captures enum value "FIXED_PRICE"
	StopLossOrderRequestTypeFIXEDPRICE string = "FIXED_PRICE"
)

// prop value enum
func (m *StopLossOrderRequest) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, stopLossOrderRequestTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StopLossOrderRequest) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StopLossOrderRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StopLossOrderRequest) UnmarshalBinary(b []byte) error {
	var res StopLossOrderRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
