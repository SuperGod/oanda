// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/SuperGod/oanda/models"
)

// StreamTransactionsReader is a Reader for the StreamTransactions structure.
type StreamTransactionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StreamTransactionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewStreamTransactionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewStreamTransactionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewStreamTransactionsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewStreamTransactionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewStreamTransactionsMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewStreamTransactionsOK creates a StreamTransactionsOK with default headers values
func NewStreamTransactionsOK() *StreamTransactionsOK {
	return &StreamTransactionsOK{}
}

/*StreamTransactionsOK handles this case with default header values.

Connecting to the Transaction Stream was successful.
*/
type StreamTransactionsOK struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *StreamTransactionsOKBody
}

func (o *StreamTransactionsOK) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/transactions/stream][%d] streamTransactionsOK  %+v", 200, o.Payload)
}

func (o *StreamTransactionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(StreamTransactionsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStreamTransactionsBadRequest creates a StreamTransactionsBadRequest with default headers values
func NewStreamTransactionsBadRequest() *StreamTransactionsBadRequest {
	return &StreamTransactionsBadRequest{}
}

/*StreamTransactionsBadRequest handles this case with default header values.

Bad Request. The client has provided invalid data to be processed by the server.
*/
type StreamTransactionsBadRequest struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *StreamTransactionsBadRequestBody
}

func (o *StreamTransactionsBadRequest) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/transactions/stream][%d] streamTransactionsBadRequest  %+v", 400, o.Payload)
}

func (o *StreamTransactionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(StreamTransactionsBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStreamTransactionsUnauthorized creates a StreamTransactionsUnauthorized with default headers values
func NewStreamTransactionsUnauthorized() *StreamTransactionsUnauthorized {
	return &StreamTransactionsUnauthorized{}
}

/*StreamTransactionsUnauthorized handles this case with default header values.

Unauthorized. The endpoint being access required the client to authenticated, however the the authentication token is invalid or has not been provided.
*/
type StreamTransactionsUnauthorized struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *StreamTransactionsUnauthorizedBody
}

func (o *StreamTransactionsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/transactions/stream][%d] streamTransactionsUnauthorized  %+v", 401, o.Payload)
}

func (o *StreamTransactionsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(StreamTransactionsUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStreamTransactionsNotFound creates a StreamTransactionsNotFound with default headers values
func NewStreamTransactionsNotFound() *StreamTransactionsNotFound {
	return &StreamTransactionsNotFound{}
}

/*StreamTransactionsNotFound handles this case with default header values.

Not Found. The client has attempted to access an entity that does not exist.
*/
type StreamTransactionsNotFound struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *StreamTransactionsNotFoundBody
}

func (o *StreamTransactionsNotFound) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/transactions/stream][%d] streamTransactionsNotFound  %+v", 404, o.Payload)
}

func (o *StreamTransactionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(StreamTransactionsNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStreamTransactionsMethodNotAllowed creates a StreamTransactionsMethodNotAllowed with default headers values
func NewStreamTransactionsMethodNotAllowed() *StreamTransactionsMethodNotAllowed {
	return &StreamTransactionsMethodNotAllowed{}
}

/*StreamTransactionsMethodNotAllowed handles this case with default header values.

Method Not Allowed. The client has attempted to access an endpoint using an HTTP method that is not supported.
*/
type StreamTransactionsMethodNotAllowed struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *StreamTransactionsMethodNotAllowedBody
}

func (o *StreamTransactionsMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/transactions/stream][%d] streamTransactionsMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *StreamTransactionsMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(StreamTransactionsMethodNotAllowedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*StreamTransactionsBadRequestBody stream transactions bad request body
swagger:model StreamTransactionsBadRequestBody
*/
type StreamTransactionsBadRequestBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`
}

// Validate validates this stream transactions bad request body
func (o *StreamTransactionsBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StreamTransactionsBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StreamTransactionsBadRequestBody) UnmarshalBinary(b []byte) error {
	var res StreamTransactionsBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*StreamTransactionsMethodNotAllowedBody stream transactions method not allowed body
swagger:model StreamTransactionsMethodNotAllowedBody
*/
type StreamTransactionsMethodNotAllowedBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`
}

// Validate validates this stream transactions method not allowed body
func (o *StreamTransactionsMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StreamTransactionsMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StreamTransactionsMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res StreamTransactionsMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*StreamTransactionsNotFoundBody stream transactions not found body
swagger:model StreamTransactionsNotFoundBody
*/
type StreamTransactionsNotFoundBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`
}

// Validate validates this stream transactions not found body
func (o *StreamTransactionsNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StreamTransactionsNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StreamTransactionsNotFoundBody) UnmarshalBinary(b []byte) error {
	var res StreamTransactionsNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*StreamTransactionsOKBody The response body for the Transaction Stream uses chunked transfer encoding.  Each chunk contains Transaction and/or TransactionHeartbeat objects encoded as JSON.  Each JSON object is serialized into a single line of text, and multiple objects found in the same chunk are separated by newlines.
// TransactionHeartbeats are sent every 5 seconds.
swagger:model StreamTransactionsOKBody
*/
type StreamTransactionsOKBody struct {

	// heartbeat
	Heartbeat *models.TransactionHeartbeat `json:"heartbeat,omitempty"`

	// transaction
	Transaction *models.Transaction `json:"transaction,omitempty"`
}

// Validate validates this stream transactions o k body
func (o *StreamTransactionsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateHeartbeat(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTransaction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StreamTransactionsOKBody) validateHeartbeat(formats strfmt.Registry) error {

	if swag.IsZero(o.Heartbeat) { // not required
		return nil
	}

	if o.Heartbeat != nil {
		if err := o.Heartbeat.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("streamTransactionsOK" + "." + "heartbeat")
			}
			return err
		}
	}

	return nil
}

func (o *StreamTransactionsOKBody) validateTransaction(formats strfmt.Registry) error {

	if swag.IsZero(o.Transaction) { // not required
		return nil
	}

	if o.Transaction != nil {
		if err := o.Transaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("streamTransactionsOK" + "." + "transaction")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *StreamTransactionsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StreamTransactionsOKBody) UnmarshalBinary(b []byte) error {
	var res StreamTransactionsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*StreamTransactionsUnauthorizedBody stream transactions unauthorized body
swagger:model StreamTransactionsUnauthorizedBody
*/
type StreamTransactionsUnauthorizedBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`
}

// Validate validates this stream transactions unauthorized body
func (o *StreamTransactionsUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StreamTransactionsUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StreamTransactionsUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res StreamTransactionsUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
