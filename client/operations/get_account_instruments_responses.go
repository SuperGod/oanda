// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/SuperGod/oanda/models"
)

// GetAccountInstrumentsReader is a Reader for the GetAccountInstruments structure.
type GetAccountInstrumentsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAccountInstrumentsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetAccountInstrumentsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetAccountInstrumentsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetAccountInstrumentsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewGetAccountInstrumentsMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetAccountInstrumentsOK creates a GetAccountInstrumentsOK with default headers values
func NewGetAccountInstrumentsOK() *GetAccountInstrumentsOK {
	return &GetAccountInstrumentsOK{}
}

/*GetAccountInstrumentsOK handles this case with default header values.

The list of tradeable instruments for the Account has been provided.
*/
type GetAccountInstrumentsOK struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *GetAccountInstrumentsOKBody
}

func (o *GetAccountInstrumentsOK) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/instruments][%d] getAccountInstrumentsOK  %+v", 200, o.Payload)
}

func (o *GetAccountInstrumentsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(GetAccountInstrumentsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAccountInstrumentsBadRequest creates a GetAccountInstrumentsBadRequest with default headers values
func NewGetAccountInstrumentsBadRequest() *GetAccountInstrumentsBadRequest {
	return &GetAccountInstrumentsBadRequest{}
}

/*GetAccountInstrumentsBadRequest handles this case with default header values.

Bad Request. The client has provided invalid data to be processed by the server.
*/
type GetAccountInstrumentsBadRequest struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *GetAccountInstrumentsBadRequestBody
}

func (o *GetAccountInstrumentsBadRequest) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/instruments][%d] getAccountInstrumentsBadRequest  %+v", 400, o.Payload)
}

func (o *GetAccountInstrumentsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(GetAccountInstrumentsBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAccountInstrumentsUnauthorized creates a GetAccountInstrumentsUnauthorized with default headers values
func NewGetAccountInstrumentsUnauthorized() *GetAccountInstrumentsUnauthorized {
	return &GetAccountInstrumentsUnauthorized{}
}

/*GetAccountInstrumentsUnauthorized handles this case with default header values.

Unauthorized. The endpoint being access required the client to authenticated, however the the authentication token is invalid or has not been provided.
*/
type GetAccountInstrumentsUnauthorized struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *GetAccountInstrumentsUnauthorizedBody
}

func (o *GetAccountInstrumentsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/instruments][%d] getAccountInstrumentsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAccountInstrumentsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(GetAccountInstrumentsUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAccountInstrumentsMethodNotAllowed creates a GetAccountInstrumentsMethodNotAllowed with default headers values
func NewGetAccountInstrumentsMethodNotAllowed() *GetAccountInstrumentsMethodNotAllowed {
	return &GetAccountInstrumentsMethodNotAllowed{}
}

/*GetAccountInstrumentsMethodNotAllowed handles this case with default header values.

Method Not Allowed. The client has attempted to access an endpoint using an HTTP method that is not supported.
*/
type GetAccountInstrumentsMethodNotAllowed struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *GetAccountInstrumentsMethodNotAllowedBody
}

func (o *GetAccountInstrumentsMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/instruments][%d] getAccountInstrumentsMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *GetAccountInstrumentsMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(GetAccountInstrumentsMethodNotAllowedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetAccountInstrumentsBadRequestBody get account instruments bad request body
swagger:model GetAccountInstrumentsBadRequestBody
*/
type GetAccountInstrumentsBadRequestBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`
}

// Validate validates this get account instruments bad request body
func (o *GetAccountInstrumentsBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAccountInstrumentsBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAccountInstrumentsBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetAccountInstrumentsBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAccountInstrumentsMethodNotAllowedBody get account instruments method not allowed body
swagger:model GetAccountInstrumentsMethodNotAllowedBody
*/
type GetAccountInstrumentsMethodNotAllowedBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`
}

// Validate validates this get account instruments method not allowed body
func (o *GetAccountInstrumentsMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAccountInstrumentsMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAccountInstrumentsMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res GetAccountInstrumentsMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAccountInstrumentsOKBody get account instruments o k body
swagger:model GetAccountInstrumentsOKBody
*/
type GetAccountInstrumentsOKBody struct {

	// The requested list of instruments.
	Instruments []*models.Instrument `json:"instruments"`

	// The ID of the most recent Transaction created for the Account.
	LastTransactionID string `json:"lastTransactionID,omitempty"`
}

// Validate validates this get account instruments o k body
func (o *GetAccountInstrumentsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateInstruments(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAccountInstrumentsOKBody) validateInstruments(formats strfmt.Registry) error {

	if swag.IsZero(o.Instruments) { // not required
		return nil
	}

	for i := 0; i < len(o.Instruments); i++ {
		if swag.IsZero(o.Instruments[i]) { // not required
			continue
		}

		if o.Instruments[i] != nil {
			if err := o.Instruments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getAccountInstrumentsOK" + "." + "instruments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAccountInstrumentsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAccountInstrumentsOKBody) UnmarshalBinary(b []byte) error {
	var res GetAccountInstrumentsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAccountInstrumentsUnauthorizedBody get account instruments unauthorized body
swagger:model GetAccountInstrumentsUnauthorizedBody
*/
type GetAccountInstrumentsUnauthorizedBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`
}

// Validate validates this get account instruments unauthorized body
func (o *GetAccountInstrumentsUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAccountInstrumentsUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAccountInstrumentsUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res GetAccountInstrumentsUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
