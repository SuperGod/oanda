// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/SuperGod/oanda/models"
)

// GetTradeReader is a Reader for the GetTrade structure.
type GetTradeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTradeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetTradeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetTradeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetTradeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewGetTradeMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetTradeOK creates a GetTradeOK with default headers values
func NewGetTradeOK() *GetTradeOK {
	return &GetTradeOK{}
}

/*GetTradeOK handles this case with default header values.

The details for the requested Trade is provided
*/
type GetTradeOK struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *GetTradeOKBody
}

func (o *GetTradeOK) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/trades/{tradeSpecifier}][%d] getTradeOK  %+v", 200, o.Payload)
}

func (o *GetTradeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(GetTradeOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTradeUnauthorized creates a GetTradeUnauthorized with default headers values
func NewGetTradeUnauthorized() *GetTradeUnauthorized {
	return &GetTradeUnauthorized{}
}

/*GetTradeUnauthorized handles this case with default header values.

Unauthorized. The endpoint being access required the client to authenticated, however the the authentication token is invalid or has not been provided.
*/
type GetTradeUnauthorized struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *GetTradeUnauthorizedBody
}

func (o *GetTradeUnauthorized) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/trades/{tradeSpecifier}][%d] getTradeUnauthorized  %+v", 401, o.Payload)
}

func (o *GetTradeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(GetTradeUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTradeNotFound creates a GetTradeNotFound with default headers values
func NewGetTradeNotFound() *GetTradeNotFound {
	return &GetTradeNotFound{}
}

/*GetTradeNotFound handles this case with default header values.

Not Found. The client has attempted to access an entity that does not exist.
*/
type GetTradeNotFound struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *GetTradeNotFoundBody
}

func (o *GetTradeNotFound) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/trades/{tradeSpecifier}][%d] getTradeNotFound  %+v", 404, o.Payload)
}

func (o *GetTradeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(GetTradeNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTradeMethodNotAllowed creates a GetTradeMethodNotAllowed with default headers values
func NewGetTradeMethodNotAllowed() *GetTradeMethodNotAllowed {
	return &GetTradeMethodNotAllowed{}
}

/*GetTradeMethodNotAllowed handles this case with default header values.

Method Not Allowed. The client has attempted to access an endpoint using an HTTP method that is not supported.
*/
type GetTradeMethodNotAllowed struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *GetTradeMethodNotAllowedBody
}

func (o *GetTradeMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/trades/{tradeSpecifier}][%d] getTradeMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *GetTradeMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(GetTradeMethodNotAllowedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetTradeMethodNotAllowedBody get trade method not allowed body
swagger:model GetTradeMethodNotAllowedBody
*/
type GetTradeMethodNotAllowedBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`
}

// Validate validates this get trade method not allowed body
func (o *GetTradeMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetTradeMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTradeMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res GetTradeMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTradeNotFoundBody get trade not found body
swagger:model GetTradeNotFoundBody
*/
type GetTradeNotFoundBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`
}

// Validate validates this get trade not found body
func (o *GetTradeNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetTradeNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTradeNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetTradeNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTradeOKBody get trade o k body
swagger:model GetTradeOKBody
*/
type GetTradeOKBody struct {

	// The ID of the most recent Transaction created for the Account
	LastTransactionID string `json:"lastTransactionID,omitempty"`

	// trade
	Trade *models.Trade `json:"trade,omitempty"`
}

// Validate validates this get trade o k body
func (o *GetTradeOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTrade(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTradeOKBody) validateTrade(formats strfmt.Registry) error {

	if swag.IsZero(o.Trade) { // not required
		return nil
	}

	if o.Trade != nil {
		if err := o.Trade.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTradeOK" + "." + "trade")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTradeOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTradeOKBody) UnmarshalBinary(b []byte) error {
	var res GetTradeOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTradeUnauthorizedBody get trade unauthorized body
swagger:model GetTradeUnauthorizedBody
*/
type GetTradeUnauthorizedBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`
}

// Validate validates this get trade unauthorized body
func (o *GetTradeUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetTradeUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTradeUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res GetTradeUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
