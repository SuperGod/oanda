// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/SuperGod/oanda/models"
)

// SetTradeDependentOrdersReader is a Reader for the SetTradeDependentOrders structure.
type SetTradeDependentOrdersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SetTradeDependentOrdersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewSetTradeDependentOrdersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewSetTradeDependentOrdersBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewSetTradeDependentOrdersUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewSetTradeDependentOrdersNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewSetTradeDependentOrdersMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSetTradeDependentOrdersOK creates a SetTradeDependentOrdersOK with default headers values
func NewSetTradeDependentOrdersOK() *SetTradeDependentOrdersOK {
	return &SetTradeDependentOrdersOK{}
}

/*SetTradeDependentOrdersOK handles this case with default header values.

The Trade's dependent Orders have been modified as requested.
*/
type SetTradeDependentOrdersOK struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *SetTradeDependentOrdersOKBody
}

func (o *SetTradeDependentOrdersOK) Error() string {
	return fmt.Sprintf("[PUT /accounts/{accountID}/trades/{tradeSpecifier}/orders][%d] setTradeDependentOrdersOK  %+v", 200, o.Payload)
}

func (o *SetTradeDependentOrdersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(SetTradeDependentOrdersOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetTradeDependentOrdersBadRequest creates a SetTradeDependentOrdersBadRequest with default headers values
func NewSetTradeDependentOrdersBadRequest() *SetTradeDependentOrdersBadRequest {
	return &SetTradeDependentOrdersBadRequest{}
}

/*SetTradeDependentOrdersBadRequest handles this case with default header values.

The Trade's dependent Orders cannot be modified as requested.
*/
type SetTradeDependentOrdersBadRequest struct {
	Payload *SetTradeDependentOrdersBadRequestBody
}

func (o *SetTradeDependentOrdersBadRequest) Error() string {
	return fmt.Sprintf("[PUT /accounts/{accountID}/trades/{tradeSpecifier}/orders][%d] setTradeDependentOrdersBadRequest  %+v", 400, o.Payload)
}

func (o *SetTradeDependentOrdersBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SetTradeDependentOrdersBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetTradeDependentOrdersUnauthorized creates a SetTradeDependentOrdersUnauthorized with default headers values
func NewSetTradeDependentOrdersUnauthorized() *SetTradeDependentOrdersUnauthorized {
	return &SetTradeDependentOrdersUnauthorized{}
}

/*SetTradeDependentOrdersUnauthorized handles this case with default header values.

Unauthorized. The endpoint being access required the client to authenticated, however the the authentication token is invalid or has not been provided.
*/
type SetTradeDependentOrdersUnauthorized struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *SetTradeDependentOrdersUnauthorizedBody
}

func (o *SetTradeDependentOrdersUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /accounts/{accountID}/trades/{tradeSpecifier}/orders][%d] setTradeDependentOrdersUnauthorized  %+v", 401, o.Payload)
}

func (o *SetTradeDependentOrdersUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(SetTradeDependentOrdersUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetTradeDependentOrdersNotFound creates a SetTradeDependentOrdersNotFound with default headers values
func NewSetTradeDependentOrdersNotFound() *SetTradeDependentOrdersNotFound {
	return &SetTradeDependentOrdersNotFound{}
}

/*SetTradeDependentOrdersNotFound handles this case with default header values.

Not Found. The client has attempted to access an entity that does not exist.
*/
type SetTradeDependentOrdersNotFound struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *SetTradeDependentOrdersNotFoundBody
}

func (o *SetTradeDependentOrdersNotFound) Error() string {
	return fmt.Sprintf("[PUT /accounts/{accountID}/trades/{tradeSpecifier}/orders][%d] setTradeDependentOrdersNotFound  %+v", 404, o.Payload)
}

func (o *SetTradeDependentOrdersNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(SetTradeDependentOrdersNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetTradeDependentOrdersMethodNotAllowed creates a SetTradeDependentOrdersMethodNotAllowed with default headers values
func NewSetTradeDependentOrdersMethodNotAllowed() *SetTradeDependentOrdersMethodNotAllowed {
	return &SetTradeDependentOrdersMethodNotAllowed{}
}

/*SetTradeDependentOrdersMethodNotAllowed handles this case with default header values.

Method Not Allowed. The client has attempted to access an endpoint using an HTTP method that is not supported.
*/
type SetTradeDependentOrdersMethodNotAllowed struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *SetTradeDependentOrdersMethodNotAllowedBody
}

func (o *SetTradeDependentOrdersMethodNotAllowed) Error() string {
	return fmt.Sprintf("[PUT /accounts/{accountID}/trades/{tradeSpecifier}/orders][%d] setTradeDependentOrdersMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *SetTradeDependentOrdersMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(SetTradeDependentOrdersMethodNotAllowedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*SetTradeDependentOrdersBadRequestBody set trade dependent orders bad request body
swagger:model SetTradeDependentOrdersBadRequestBody
*/
type SetTradeDependentOrdersBadRequestBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`

	// The ID of the most recent Transaction created for the Account.
	LastTransactionID string `json:"lastTransactionID,omitempty"`

	// The IDs of all Transactions that were created while satisfying the request.
	RelatedTransactionIds []string `json:"relatedTransactionIDs"`

	// stop loss order cancel reject transaction
	StopLossOrderCancelRejectTransaction *models.OrderCancelRejectTransaction `json:"stopLossOrderCancelRejectTransaction,omitempty"`

	// stop loss order reject transaction
	StopLossOrderRejectTransaction *models.StopLossOrderRejectTransaction `json:"stopLossOrderRejectTransaction,omitempty"`

	// take profit order cancel reject transaction
	TakeProfitOrderCancelRejectTransaction *models.OrderCancelRejectTransaction `json:"takeProfitOrderCancelRejectTransaction,omitempty"`

	// take profit order reject transaction
	TakeProfitOrderRejectTransaction *models.TakeProfitOrderRejectTransaction `json:"takeProfitOrderRejectTransaction,omitempty"`

	// trailing stop loss order cancel reject transaction
	TrailingStopLossOrderCancelRejectTransaction *models.OrderCancelRejectTransaction `json:"trailingStopLossOrderCancelRejectTransaction,omitempty"`

	// trailing stop loss order reject transaction
	TrailingStopLossOrderRejectTransaction *models.TrailingStopLossOrderRejectTransaction `json:"trailingStopLossOrderRejectTransaction,omitempty"`
}

// Validate validates this set trade dependent orders bad request body
func (o *SetTradeDependentOrdersBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStopLossOrderCancelRejectTransaction(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStopLossOrderRejectTransaction(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTakeProfitOrderCancelRejectTransaction(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTakeProfitOrderRejectTransaction(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTrailingStopLossOrderCancelRejectTransaction(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTrailingStopLossOrderRejectTransaction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SetTradeDependentOrdersBadRequestBody) validateStopLossOrderCancelRejectTransaction(formats strfmt.Registry) error {

	if swag.IsZero(o.StopLossOrderCancelRejectTransaction) { // not required
		return nil
	}

	if o.StopLossOrderCancelRejectTransaction != nil {
		if err := o.StopLossOrderCancelRejectTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("setTradeDependentOrdersBadRequest" + "." + "stopLossOrderCancelRejectTransaction")
			}
			return err
		}
	}

	return nil
}

func (o *SetTradeDependentOrdersBadRequestBody) validateStopLossOrderRejectTransaction(formats strfmt.Registry) error {

	if swag.IsZero(o.StopLossOrderRejectTransaction) { // not required
		return nil
	}

	if o.StopLossOrderRejectTransaction != nil {
		if err := o.StopLossOrderRejectTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("setTradeDependentOrdersBadRequest" + "." + "stopLossOrderRejectTransaction")
			}
			return err
		}
	}

	return nil
}

func (o *SetTradeDependentOrdersBadRequestBody) validateTakeProfitOrderCancelRejectTransaction(formats strfmt.Registry) error {

	if swag.IsZero(o.TakeProfitOrderCancelRejectTransaction) { // not required
		return nil
	}

	if o.TakeProfitOrderCancelRejectTransaction != nil {
		if err := o.TakeProfitOrderCancelRejectTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("setTradeDependentOrdersBadRequest" + "." + "takeProfitOrderCancelRejectTransaction")
			}
			return err
		}
	}

	return nil
}

func (o *SetTradeDependentOrdersBadRequestBody) validateTakeProfitOrderRejectTransaction(formats strfmt.Registry) error {

	if swag.IsZero(o.TakeProfitOrderRejectTransaction) { // not required
		return nil
	}

	if o.TakeProfitOrderRejectTransaction != nil {
		if err := o.TakeProfitOrderRejectTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("setTradeDependentOrdersBadRequest" + "." + "takeProfitOrderRejectTransaction")
			}
			return err
		}
	}

	return nil
}

func (o *SetTradeDependentOrdersBadRequestBody) validateTrailingStopLossOrderCancelRejectTransaction(formats strfmt.Registry) error {

	if swag.IsZero(o.TrailingStopLossOrderCancelRejectTransaction) { // not required
		return nil
	}

	if o.TrailingStopLossOrderCancelRejectTransaction != nil {
		if err := o.TrailingStopLossOrderCancelRejectTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("setTradeDependentOrdersBadRequest" + "." + "trailingStopLossOrderCancelRejectTransaction")
			}
			return err
		}
	}

	return nil
}

func (o *SetTradeDependentOrdersBadRequestBody) validateTrailingStopLossOrderRejectTransaction(formats strfmt.Registry) error {

	if swag.IsZero(o.TrailingStopLossOrderRejectTransaction) { // not required
		return nil
	}

	if o.TrailingStopLossOrderRejectTransaction != nil {
		if err := o.TrailingStopLossOrderRejectTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("setTradeDependentOrdersBadRequest" + "." + "trailingStopLossOrderRejectTransaction")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SetTradeDependentOrdersBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SetTradeDependentOrdersBadRequestBody) UnmarshalBinary(b []byte) error {
	var res SetTradeDependentOrdersBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SetTradeDependentOrdersBody set trade dependent orders body
swagger:model SetTradeDependentOrdersBody
*/
type SetTradeDependentOrdersBody struct {

	// stop loss
	StopLoss *models.StopLossDetails `json:"stopLoss,omitempty"`

	// take profit
	TakeProfit *models.TakeProfitDetails `json:"takeProfit,omitempty"`

	// trailing stop loss
	TrailingStopLoss *models.TrailingStopLossDetails `json:"trailingStopLoss,omitempty"`
}

// Validate validates this set trade dependent orders body
func (o *SetTradeDependentOrdersBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStopLoss(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTakeProfit(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTrailingStopLoss(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SetTradeDependentOrdersBody) validateStopLoss(formats strfmt.Registry) error {

	if swag.IsZero(o.StopLoss) { // not required
		return nil
	}

	if o.StopLoss != nil {
		if err := o.StopLoss.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("setTradeDependentOrdersBody" + "." + "stopLoss")
			}
			return err
		}
	}

	return nil
}

func (o *SetTradeDependentOrdersBody) validateTakeProfit(formats strfmt.Registry) error {

	if swag.IsZero(o.TakeProfit) { // not required
		return nil
	}

	if o.TakeProfit != nil {
		if err := o.TakeProfit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("setTradeDependentOrdersBody" + "." + "takeProfit")
			}
			return err
		}
	}

	return nil
}

func (o *SetTradeDependentOrdersBody) validateTrailingStopLoss(formats strfmt.Registry) error {

	if swag.IsZero(o.TrailingStopLoss) { // not required
		return nil
	}

	if o.TrailingStopLoss != nil {
		if err := o.TrailingStopLoss.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("setTradeDependentOrdersBody" + "." + "trailingStopLoss")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SetTradeDependentOrdersBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SetTradeDependentOrdersBody) UnmarshalBinary(b []byte) error {
	var res SetTradeDependentOrdersBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SetTradeDependentOrdersMethodNotAllowedBody set trade dependent orders method not allowed body
swagger:model SetTradeDependentOrdersMethodNotAllowedBody
*/
type SetTradeDependentOrdersMethodNotAllowedBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`
}

// Validate validates this set trade dependent orders method not allowed body
func (o *SetTradeDependentOrdersMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SetTradeDependentOrdersMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SetTradeDependentOrdersMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res SetTradeDependentOrdersMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SetTradeDependentOrdersNotFoundBody set trade dependent orders not found body
swagger:model SetTradeDependentOrdersNotFoundBody
*/
type SetTradeDependentOrdersNotFoundBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`
}

// Validate validates this set trade dependent orders not found body
func (o *SetTradeDependentOrdersNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SetTradeDependentOrdersNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SetTradeDependentOrdersNotFoundBody) UnmarshalBinary(b []byte) error {
	var res SetTradeDependentOrdersNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SetTradeDependentOrdersOKBody set trade dependent orders o k body
swagger:model SetTradeDependentOrdersOKBody
*/
type SetTradeDependentOrdersOKBody struct {

	// The ID of the most recent Transaction created for the Account
	LastTransactionID string `json:"lastTransactionID,omitempty"`

	// The IDs of all Transactions that were created while satisfying the request.
	RelatedTransactionIds []string `json:"relatedTransactionIDs"`

	// stop loss order cancel transaction
	StopLossOrderCancelTransaction *models.OrderCancelTransaction `json:"stopLossOrderCancelTransaction,omitempty"`

	// stop loss order created cancel transaction
	StopLossOrderCreatedCancelTransaction *models.OrderCancelTransaction `json:"stopLossOrderCreatedCancelTransaction,omitempty"`

	// stop loss order fill transaction
	StopLossOrderFillTransaction *models.OrderFillTransaction `json:"stopLossOrderFillTransaction,omitempty"`

	// stop loss order transaction
	StopLossOrderTransaction *models.StopLossOrderTransaction `json:"stopLossOrderTransaction,omitempty"`

	// take profit order cancel transaction
	TakeProfitOrderCancelTransaction *models.OrderCancelTransaction `json:"takeProfitOrderCancelTransaction,omitempty"`

	// take profit order created cancel transaction
	TakeProfitOrderCreatedCancelTransaction *models.OrderCancelTransaction `json:"takeProfitOrderCreatedCancelTransaction,omitempty"`

	// take profit order fill transaction
	TakeProfitOrderFillTransaction *models.OrderFillTransaction `json:"takeProfitOrderFillTransaction,omitempty"`

	// take profit order transaction
	TakeProfitOrderTransaction *models.TakeProfitOrderTransaction `json:"takeProfitOrderTransaction,omitempty"`

	// trailing stop loss order cancel transaction
	TrailingStopLossOrderCancelTransaction *models.OrderCancelTransaction `json:"trailingStopLossOrderCancelTransaction,omitempty"`

	// trailing stop loss order transaction
	TrailingStopLossOrderTransaction *models.TrailingStopLossOrderTransaction `json:"trailingStopLossOrderTransaction,omitempty"`
}

// Validate validates this set trade dependent orders o k body
func (o *SetTradeDependentOrdersOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStopLossOrderCancelTransaction(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStopLossOrderCreatedCancelTransaction(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStopLossOrderFillTransaction(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStopLossOrderTransaction(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTakeProfitOrderCancelTransaction(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTakeProfitOrderCreatedCancelTransaction(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTakeProfitOrderFillTransaction(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTakeProfitOrderTransaction(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTrailingStopLossOrderCancelTransaction(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTrailingStopLossOrderTransaction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SetTradeDependentOrdersOKBody) validateStopLossOrderCancelTransaction(formats strfmt.Registry) error {

	if swag.IsZero(o.StopLossOrderCancelTransaction) { // not required
		return nil
	}

	if o.StopLossOrderCancelTransaction != nil {
		if err := o.StopLossOrderCancelTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("setTradeDependentOrdersOK" + "." + "stopLossOrderCancelTransaction")
			}
			return err
		}
	}

	return nil
}

func (o *SetTradeDependentOrdersOKBody) validateStopLossOrderCreatedCancelTransaction(formats strfmt.Registry) error {

	if swag.IsZero(o.StopLossOrderCreatedCancelTransaction) { // not required
		return nil
	}

	if o.StopLossOrderCreatedCancelTransaction != nil {
		if err := o.StopLossOrderCreatedCancelTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("setTradeDependentOrdersOK" + "." + "stopLossOrderCreatedCancelTransaction")
			}
			return err
		}
	}

	return nil
}

func (o *SetTradeDependentOrdersOKBody) validateStopLossOrderFillTransaction(formats strfmt.Registry) error {

	if swag.IsZero(o.StopLossOrderFillTransaction) { // not required
		return nil
	}

	if o.StopLossOrderFillTransaction != nil {
		if err := o.StopLossOrderFillTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("setTradeDependentOrdersOK" + "." + "stopLossOrderFillTransaction")
			}
			return err
		}
	}

	return nil
}

func (o *SetTradeDependentOrdersOKBody) validateStopLossOrderTransaction(formats strfmt.Registry) error {

	if swag.IsZero(o.StopLossOrderTransaction) { // not required
		return nil
	}

	if o.StopLossOrderTransaction != nil {
		if err := o.StopLossOrderTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("setTradeDependentOrdersOK" + "." + "stopLossOrderTransaction")
			}
			return err
		}
	}

	return nil
}

func (o *SetTradeDependentOrdersOKBody) validateTakeProfitOrderCancelTransaction(formats strfmt.Registry) error {

	if swag.IsZero(o.TakeProfitOrderCancelTransaction) { // not required
		return nil
	}

	if o.TakeProfitOrderCancelTransaction != nil {
		if err := o.TakeProfitOrderCancelTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("setTradeDependentOrdersOK" + "." + "takeProfitOrderCancelTransaction")
			}
			return err
		}
	}

	return nil
}

func (o *SetTradeDependentOrdersOKBody) validateTakeProfitOrderCreatedCancelTransaction(formats strfmt.Registry) error {

	if swag.IsZero(o.TakeProfitOrderCreatedCancelTransaction) { // not required
		return nil
	}

	if o.TakeProfitOrderCreatedCancelTransaction != nil {
		if err := o.TakeProfitOrderCreatedCancelTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("setTradeDependentOrdersOK" + "." + "takeProfitOrderCreatedCancelTransaction")
			}
			return err
		}
	}

	return nil
}

func (o *SetTradeDependentOrdersOKBody) validateTakeProfitOrderFillTransaction(formats strfmt.Registry) error {

	if swag.IsZero(o.TakeProfitOrderFillTransaction) { // not required
		return nil
	}

	if o.TakeProfitOrderFillTransaction != nil {
		if err := o.TakeProfitOrderFillTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("setTradeDependentOrdersOK" + "." + "takeProfitOrderFillTransaction")
			}
			return err
		}
	}

	return nil
}

func (o *SetTradeDependentOrdersOKBody) validateTakeProfitOrderTransaction(formats strfmt.Registry) error {

	if swag.IsZero(o.TakeProfitOrderTransaction) { // not required
		return nil
	}

	if o.TakeProfitOrderTransaction != nil {
		if err := o.TakeProfitOrderTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("setTradeDependentOrdersOK" + "." + "takeProfitOrderTransaction")
			}
			return err
		}
	}

	return nil
}

func (o *SetTradeDependentOrdersOKBody) validateTrailingStopLossOrderCancelTransaction(formats strfmt.Registry) error {

	if swag.IsZero(o.TrailingStopLossOrderCancelTransaction) { // not required
		return nil
	}

	if o.TrailingStopLossOrderCancelTransaction != nil {
		if err := o.TrailingStopLossOrderCancelTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("setTradeDependentOrdersOK" + "." + "trailingStopLossOrderCancelTransaction")
			}
			return err
		}
	}

	return nil
}

func (o *SetTradeDependentOrdersOKBody) validateTrailingStopLossOrderTransaction(formats strfmt.Registry) error {

	if swag.IsZero(o.TrailingStopLossOrderTransaction) { // not required
		return nil
	}

	if o.TrailingStopLossOrderTransaction != nil {
		if err := o.TrailingStopLossOrderTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("setTradeDependentOrdersOK" + "." + "trailingStopLossOrderTransaction")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SetTradeDependentOrdersOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SetTradeDependentOrdersOKBody) UnmarshalBinary(b []byte) error {
	var res SetTradeDependentOrdersOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SetTradeDependentOrdersUnauthorizedBody set trade dependent orders unauthorized body
swagger:model SetTradeDependentOrdersUnauthorizedBody
*/
type SetTradeDependentOrdersUnauthorizedBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`
}

// Validate validates this set trade dependent orders unauthorized body
func (o *SetTradeDependentOrdersUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SetTradeDependentOrdersUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SetTradeDependentOrdersUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res SetTradeDependentOrdersUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
