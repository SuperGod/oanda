// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/SuperGod/oanda/models"
)

// SetTradeClientExtensionsReader is a Reader for the SetTradeClientExtensions structure.
type SetTradeClientExtensionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SetTradeClientExtensionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewSetTradeClientExtensionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewSetTradeClientExtensionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewSetTradeClientExtensionsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewSetTradeClientExtensionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewSetTradeClientExtensionsMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSetTradeClientExtensionsOK creates a SetTradeClientExtensionsOK with default headers values
func NewSetTradeClientExtensionsOK() *SetTradeClientExtensionsOK {
	return &SetTradeClientExtensionsOK{}
}

/*SetTradeClientExtensionsOK handles this case with default header values.

The Trade's Client Extensions have been updated as requested.
*/
type SetTradeClientExtensionsOK struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *SetTradeClientExtensionsOKBody
}

func (o *SetTradeClientExtensionsOK) Error() string {
	return fmt.Sprintf("[PUT /accounts/{accountID}/trades/{tradeSpecifier}/clientExtensions][%d] setTradeClientExtensionsOK  %+v", 200, o.Payload)
}

func (o *SetTradeClientExtensionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(SetTradeClientExtensionsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetTradeClientExtensionsBadRequest creates a SetTradeClientExtensionsBadRequest with default headers values
func NewSetTradeClientExtensionsBadRequest() *SetTradeClientExtensionsBadRequest {
	return &SetTradeClientExtensionsBadRequest{}
}

/*SetTradeClientExtensionsBadRequest handles this case with default header values.

The Trade's Client Extensions cannot be modified as requested.
*/
type SetTradeClientExtensionsBadRequest struct {
	Payload *SetTradeClientExtensionsBadRequestBody
}

func (o *SetTradeClientExtensionsBadRequest) Error() string {
	return fmt.Sprintf("[PUT /accounts/{accountID}/trades/{tradeSpecifier}/clientExtensions][%d] setTradeClientExtensionsBadRequest  %+v", 400, o.Payload)
}

func (o *SetTradeClientExtensionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SetTradeClientExtensionsBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetTradeClientExtensionsUnauthorized creates a SetTradeClientExtensionsUnauthorized with default headers values
func NewSetTradeClientExtensionsUnauthorized() *SetTradeClientExtensionsUnauthorized {
	return &SetTradeClientExtensionsUnauthorized{}
}

/*SetTradeClientExtensionsUnauthorized handles this case with default header values.

Unauthorized. The endpoint being access required the client to authenticated, however the the authentication token is invalid or has not been provided.
*/
type SetTradeClientExtensionsUnauthorized struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *SetTradeClientExtensionsUnauthorizedBody
}

func (o *SetTradeClientExtensionsUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /accounts/{accountID}/trades/{tradeSpecifier}/clientExtensions][%d] setTradeClientExtensionsUnauthorized  %+v", 401, o.Payload)
}

func (o *SetTradeClientExtensionsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(SetTradeClientExtensionsUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetTradeClientExtensionsNotFound creates a SetTradeClientExtensionsNotFound with default headers values
func NewSetTradeClientExtensionsNotFound() *SetTradeClientExtensionsNotFound {
	return &SetTradeClientExtensionsNotFound{}
}

/*SetTradeClientExtensionsNotFound handles this case with default header values.

The Account or Trade specified does not exist.
*/
type SetTradeClientExtensionsNotFound struct {
	Payload *SetTradeClientExtensionsNotFoundBody
}

func (o *SetTradeClientExtensionsNotFound) Error() string {
	return fmt.Sprintf("[PUT /accounts/{accountID}/trades/{tradeSpecifier}/clientExtensions][%d] setTradeClientExtensionsNotFound  %+v", 404, o.Payload)
}

func (o *SetTradeClientExtensionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SetTradeClientExtensionsNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetTradeClientExtensionsMethodNotAllowed creates a SetTradeClientExtensionsMethodNotAllowed with default headers values
func NewSetTradeClientExtensionsMethodNotAllowed() *SetTradeClientExtensionsMethodNotAllowed {
	return &SetTradeClientExtensionsMethodNotAllowed{}
}

/*SetTradeClientExtensionsMethodNotAllowed handles this case with default header values.

Method Not Allowed. The client has attempted to access an endpoint using an HTTP method that is not supported.
*/
type SetTradeClientExtensionsMethodNotAllowed struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *SetTradeClientExtensionsMethodNotAllowedBody
}

func (o *SetTradeClientExtensionsMethodNotAllowed) Error() string {
	return fmt.Sprintf("[PUT /accounts/{accountID}/trades/{tradeSpecifier}/clientExtensions][%d] setTradeClientExtensionsMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *SetTradeClientExtensionsMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(SetTradeClientExtensionsMethodNotAllowedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*SetTradeClientExtensionsBadRequestBody set trade client extensions bad request body
swagger:model SetTradeClientExtensionsBadRequestBody
*/
type SetTradeClientExtensionsBadRequestBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`

	// The ID of the most recent Transaction created for the Account.
	LastTransactionID string `json:"lastTransactionID,omitempty"`

	// The IDs of all Transactions that were created while satisfying the request.
	RelatedTransactionIds []string `json:"relatedTransactionIDs"`

	// trade client extensions modify reject transaction
	TradeClientExtensionsModifyRejectTransaction *models.TradeClientExtensionsModifyRejectTransaction `json:"tradeClientExtensionsModifyRejectTransaction,omitempty"`
}

// Validate validates this set trade client extensions bad request body
func (o *SetTradeClientExtensionsBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTradeClientExtensionsModifyRejectTransaction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SetTradeClientExtensionsBadRequestBody) validateTradeClientExtensionsModifyRejectTransaction(formats strfmt.Registry) error {

	if swag.IsZero(o.TradeClientExtensionsModifyRejectTransaction) { // not required
		return nil
	}

	if o.TradeClientExtensionsModifyRejectTransaction != nil {
		if err := o.TradeClientExtensionsModifyRejectTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("setTradeClientExtensionsBadRequest" + "." + "tradeClientExtensionsModifyRejectTransaction")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SetTradeClientExtensionsBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SetTradeClientExtensionsBadRequestBody) UnmarshalBinary(b []byte) error {
	var res SetTradeClientExtensionsBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SetTradeClientExtensionsBody set trade client extensions body
swagger:model SetTradeClientExtensionsBody
*/
type SetTradeClientExtensionsBody struct {

	// client extensions
	ClientExtensions *models.ClientExtensions `json:"clientExtensions,omitempty"`
}

// Validate validates this set trade client extensions body
func (o *SetTradeClientExtensionsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateClientExtensions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SetTradeClientExtensionsBody) validateClientExtensions(formats strfmt.Registry) error {

	if swag.IsZero(o.ClientExtensions) { // not required
		return nil
	}

	if o.ClientExtensions != nil {
		if err := o.ClientExtensions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("setTradeClientExtensionsBody" + "." + "clientExtensions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SetTradeClientExtensionsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SetTradeClientExtensionsBody) UnmarshalBinary(b []byte) error {
	var res SetTradeClientExtensionsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SetTradeClientExtensionsMethodNotAllowedBody set trade client extensions method not allowed body
swagger:model SetTradeClientExtensionsMethodNotAllowedBody
*/
type SetTradeClientExtensionsMethodNotAllowedBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`
}

// Validate validates this set trade client extensions method not allowed body
func (o *SetTradeClientExtensionsMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SetTradeClientExtensionsMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SetTradeClientExtensionsMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res SetTradeClientExtensionsMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SetTradeClientExtensionsNotFoundBody set trade client extensions not found body
swagger:model SetTradeClientExtensionsNotFoundBody
*/
type SetTradeClientExtensionsNotFoundBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`

	// The ID of the most recent Transaction created for the Account. Only present if the Account exists.
	LastTransactionID string `json:"lastTransactionID,omitempty"`

	// The IDs of all Transactions that were created while satisfying the request. Only present if the Account exists.
	RelatedTransactionIds []string `json:"relatedTransactionIDs"`

	// trade client extensions modify reject transaction
	TradeClientExtensionsModifyRejectTransaction *models.TradeClientExtensionsModifyRejectTransaction `json:"tradeClientExtensionsModifyRejectTransaction,omitempty"`
}

// Validate validates this set trade client extensions not found body
func (o *SetTradeClientExtensionsNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTradeClientExtensionsModifyRejectTransaction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SetTradeClientExtensionsNotFoundBody) validateTradeClientExtensionsModifyRejectTransaction(formats strfmt.Registry) error {

	if swag.IsZero(o.TradeClientExtensionsModifyRejectTransaction) { // not required
		return nil
	}

	if o.TradeClientExtensionsModifyRejectTransaction != nil {
		if err := o.TradeClientExtensionsModifyRejectTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("setTradeClientExtensionsNotFound" + "." + "tradeClientExtensionsModifyRejectTransaction")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SetTradeClientExtensionsNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SetTradeClientExtensionsNotFoundBody) UnmarshalBinary(b []byte) error {
	var res SetTradeClientExtensionsNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SetTradeClientExtensionsOKBody set trade client extensions o k body
swagger:model SetTradeClientExtensionsOKBody
*/
type SetTradeClientExtensionsOKBody struct {

	// The ID of the most recent Transaction created for the Account
	LastTransactionID string `json:"lastTransactionID,omitempty"`

	// The IDs of all Transactions that were created while satisfying the request.
	RelatedTransactionIds []string `json:"relatedTransactionIDs"`

	// trade client extensions modify transaction
	TradeClientExtensionsModifyTransaction *models.TradeClientExtensionsModifyTransaction `json:"tradeClientExtensionsModifyTransaction,omitempty"`
}

// Validate validates this set trade client extensions o k body
func (o *SetTradeClientExtensionsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTradeClientExtensionsModifyTransaction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SetTradeClientExtensionsOKBody) validateTradeClientExtensionsModifyTransaction(formats strfmt.Registry) error {

	if swag.IsZero(o.TradeClientExtensionsModifyTransaction) { // not required
		return nil
	}

	if o.TradeClientExtensionsModifyTransaction != nil {
		if err := o.TradeClientExtensionsModifyTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("setTradeClientExtensionsOK" + "." + "tradeClientExtensionsModifyTransaction")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SetTradeClientExtensionsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SetTradeClientExtensionsOKBody) UnmarshalBinary(b []byte) error {
	var res SetTradeClientExtensionsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SetTradeClientExtensionsUnauthorizedBody set trade client extensions unauthorized body
swagger:model SetTradeClientExtensionsUnauthorizedBody
*/
type SetTradeClientExtensionsUnauthorizedBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`
}

// Validate validates this set trade client extensions unauthorized body
func (o *SetTradeClientExtensionsUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SetTradeClientExtensionsUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SetTradeClientExtensionsUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res SetTradeClientExtensionsUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
