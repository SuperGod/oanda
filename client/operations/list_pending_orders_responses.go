// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/SuperGod/oanda/models"
)

// ListPendingOrdersReader is a Reader for the ListPendingOrders structure.
type ListPendingOrdersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListPendingOrdersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewListPendingOrdersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewListPendingOrdersUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewListPendingOrdersNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewListPendingOrdersMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListPendingOrdersOK creates a ListPendingOrdersOK with default headers values
func NewListPendingOrdersOK() *ListPendingOrdersOK {
	return &ListPendingOrdersOK{}
}

/*ListPendingOrdersOK handles this case with default header values.

List of pending Orders for the Account
*/
type ListPendingOrdersOK struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *ListPendingOrdersOKBody
}

func (o *ListPendingOrdersOK) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/pendingOrders][%d] listPendingOrdersOK  %+v", 200, o.Payload)
}

func (o *ListPendingOrdersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(ListPendingOrdersOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPendingOrdersUnauthorized creates a ListPendingOrdersUnauthorized with default headers values
func NewListPendingOrdersUnauthorized() *ListPendingOrdersUnauthorized {
	return &ListPendingOrdersUnauthorized{}
}

/*ListPendingOrdersUnauthorized handles this case with default header values.

Unauthorized. The endpoint being access required the client to authenticated, however the the authentication token is invalid or has not been provided.
*/
type ListPendingOrdersUnauthorized struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *ListPendingOrdersUnauthorizedBody
}

func (o *ListPendingOrdersUnauthorized) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/pendingOrders][%d] listPendingOrdersUnauthorized  %+v", 401, o.Payload)
}

func (o *ListPendingOrdersUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(ListPendingOrdersUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPendingOrdersNotFound creates a ListPendingOrdersNotFound with default headers values
func NewListPendingOrdersNotFound() *ListPendingOrdersNotFound {
	return &ListPendingOrdersNotFound{}
}

/*ListPendingOrdersNotFound handles this case with default header values.

Not Found. The client has attempted to access an entity that does not exist.
*/
type ListPendingOrdersNotFound struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *ListPendingOrdersNotFoundBody
}

func (o *ListPendingOrdersNotFound) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/pendingOrders][%d] listPendingOrdersNotFound  %+v", 404, o.Payload)
}

func (o *ListPendingOrdersNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(ListPendingOrdersNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPendingOrdersMethodNotAllowed creates a ListPendingOrdersMethodNotAllowed with default headers values
func NewListPendingOrdersMethodNotAllowed() *ListPendingOrdersMethodNotAllowed {
	return &ListPendingOrdersMethodNotAllowed{}
}

/*ListPendingOrdersMethodNotAllowed handles this case with default header values.

Method Not Allowed. The client has attempted to access an endpoint using an HTTP method that is not supported.
*/
type ListPendingOrdersMethodNotAllowed struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *ListPendingOrdersMethodNotAllowedBody
}

func (o *ListPendingOrdersMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/pendingOrders][%d] listPendingOrdersMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *ListPendingOrdersMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(ListPendingOrdersMethodNotAllowedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ListPendingOrdersMethodNotAllowedBody list pending orders method not allowed body
swagger:model ListPendingOrdersMethodNotAllowedBody
*/
type ListPendingOrdersMethodNotAllowedBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`
}

// Validate validates this list pending orders method not allowed body
func (o *ListPendingOrdersMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListPendingOrdersMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListPendingOrdersMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res ListPendingOrdersMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListPendingOrdersNotFoundBody list pending orders not found body
swagger:model ListPendingOrdersNotFoundBody
*/
type ListPendingOrdersNotFoundBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`
}

// Validate validates this list pending orders not found body
func (o *ListPendingOrdersNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListPendingOrdersNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListPendingOrdersNotFoundBody) UnmarshalBinary(b []byte) error {
	var res ListPendingOrdersNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListPendingOrdersOKBody list pending orders o k body
swagger:model ListPendingOrdersOKBody
*/
type ListPendingOrdersOKBody struct {

	// The ID of the most recent Transaction created for the Account
	LastTransactionID string `json:"lastTransactionID,omitempty"`

	// The list of pending Order details
	Orders []*models.Order `json:"orders"`
}

// Validate validates this list pending orders o k body
func (o *ListPendingOrdersOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateOrders(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListPendingOrdersOKBody) validateOrders(formats strfmt.Registry) error {

	if swag.IsZero(o.Orders) { // not required
		return nil
	}

	for i := 0; i < len(o.Orders); i++ {
		if swag.IsZero(o.Orders[i]) { // not required
			continue
		}

		if o.Orders[i] != nil {
			if err := o.Orders[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listPendingOrdersOK" + "." + "orders" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListPendingOrdersOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListPendingOrdersOKBody) UnmarshalBinary(b []byte) error {
	var res ListPendingOrdersOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListPendingOrdersUnauthorizedBody list pending orders unauthorized body
swagger:model ListPendingOrdersUnauthorizedBody
*/
type ListPendingOrdersUnauthorizedBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`
}

// Validate validates this list pending orders unauthorized body
func (o *ListPendingOrdersUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListPendingOrdersUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListPendingOrdersUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res ListPendingOrdersUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
