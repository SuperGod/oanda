// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/SuperGod/oanda/models"
)

// GetUserInfoReader is a Reader for the GetUserInfo structure.
type GetUserInfoReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetUserInfoReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetUserInfoOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetUserInfoUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetUserInfoForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewGetUserInfoMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetUserInfoOK creates a GetUserInfoOK with default headers values
func NewGetUserInfoOK() *GetUserInfoOK {
	return &GetUserInfoOK{}
}

/*GetUserInfoOK handles this case with default header values.

The user information has been provided
*/
type GetUserInfoOK struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *GetUserInfoOKBody
}

func (o *GetUserInfoOK) Error() string {
	return fmt.Sprintf("[GET /users/{userSpecifier}][%d] getUserInfoOK  %+v", 200, o.Payload)
}

func (o *GetUserInfoOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(GetUserInfoOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserInfoUnauthorized creates a GetUserInfoUnauthorized with default headers values
func NewGetUserInfoUnauthorized() *GetUserInfoUnauthorized {
	return &GetUserInfoUnauthorized{}
}

/*GetUserInfoUnauthorized handles this case with default header values.

Unauthorized. The endpoint being access required the client to authenticated, however the the authentication token is invalid or has not been provided.
*/
type GetUserInfoUnauthorized struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *GetUserInfoUnauthorizedBody
}

func (o *GetUserInfoUnauthorized) Error() string {
	return fmt.Sprintf("[GET /users/{userSpecifier}][%d] getUserInfoUnauthorized  %+v", 401, o.Payload)
}

func (o *GetUserInfoUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(GetUserInfoUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserInfoForbidden creates a GetUserInfoForbidden with default headers values
func NewGetUserInfoForbidden() *GetUserInfoForbidden {
	return &GetUserInfoForbidden{}
}

/*GetUserInfoForbidden handles this case with default header values.

Forbidden. The client has provided a token that does not authorize them to perform the action implemented by the API endpoint.
*/
type GetUserInfoForbidden struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *GetUserInfoForbiddenBody
}

func (o *GetUserInfoForbidden) Error() string {
	return fmt.Sprintf("[GET /users/{userSpecifier}][%d] getUserInfoForbidden  %+v", 403, o.Payload)
}

func (o *GetUserInfoForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(GetUserInfoForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserInfoMethodNotAllowed creates a GetUserInfoMethodNotAllowed with default headers values
func NewGetUserInfoMethodNotAllowed() *GetUserInfoMethodNotAllowed {
	return &GetUserInfoMethodNotAllowed{}
}

/*GetUserInfoMethodNotAllowed handles this case with default header values.

Method Not Allowed. The client has attempted to access an endpoint using an HTTP method that is not supported.
*/
type GetUserInfoMethodNotAllowed struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *GetUserInfoMethodNotAllowedBody
}

func (o *GetUserInfoMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /users/{userSpecifier}][%d] getUserInfoMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *GetUserInfoMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(GetUserInfoMethodNotAllowedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetUserInfoForbiddenBody get user info forbidden body
swagger:model GetUserInfoForbiddenBody
*/
type GetUserInfoForbiddenBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`
}

// Validate validates this get user info forbidden body
func (o *GetUserInfoForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetUserInfoForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetUserInfoForbiddenBody) UnmarshalBinary(b []byte) error {
	var res GetUserInfoForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetUserInfoMethodNotAllowedBody get user info method not allowed body
swagger:model GetUserInfoMethodNotAllowedBody
*/
type GetUserInfoMethodNotAllowedBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`
}

// Validate validates this get user info method not allowed body
func (o *GetUserInfoMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetUserInfoMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetUserInfoMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res GetUserInfoMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetUserInfoOKBody get user info o k body
swagger:model GetUserInfoOKBody
*/
type GetUserInfoOKBody struct {

	// user info
	UserInfo *models.UserInfo `json:"userInfo,omitempty"`
}

// Validate validates this get user info o k body
func (o *GetUserInfoOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateUserInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetUserInfoOKBody) validateUserInfo(formats strfmt.Registry) error {

	if swag.IsZero(o.UserInfo) { // not required
		return nil
	}

	if o.UserInfo != nil {
		if err := o.UserInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getUserInfoOK" + "." + "userInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetUserInfoOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetUserInfoOKBody) UnmarshalBinary(b []byte) error {
	var res GetUserInfoOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetUserInfoUnauthorizedBody get user info unauthorized body
swagger:model GetUserInfoUnauthorizedBody
*/
type GetUserInfoUnauthorizedBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`
}

// Validate validates this get user info unauthorized body
func (o *GetUserInfoUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetUserInfoUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetUserInfoUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res GetUserInfoUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
