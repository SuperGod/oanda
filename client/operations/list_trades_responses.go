// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/SuperGod/oanda/models"
)

// ListTradesReader is a Reader for the ListTrades structure.
type ListTradesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListTradesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewListTradesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewListTradesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewListTradesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewListTradesMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListTradesOK creates a ListTradesOK with default headers values
func NewListTradesOK() *ListTradesOK {
	return &ListTradesOK{}
}

/*ListTradesOK handles this case with default header values.

The list of Trades requested
*/
type ListTradesOK struct {
	/*A link to the next page of Trades if the results were paginated
	 */
	Link string
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *ListTradesOKBody
}

func (o *ListTradesOK) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/trades][%d] listTradesOK  %+v", 200, o.Payload)
}

func (o *ListTradesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Link
	o.Link = response.GetHeader("Link")

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(ListTradesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListTradesUnauthorized creates a ListTradesUnauthorized with default headers values
func NewListTradesUnauthorized() *ListTradesUnauthorized {
	return &ListTradesUnauthorized{}
}

/*ListTradesUnauthorized handles this case with default header values.

Unauthorized. The endpoint being access required the client to authenticated, however the the authentication token is invalid or has not been provided.
*/
type ListTradesUnauthorized struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *ListTradesUnauthorizedBody
}

func (o *ListTradesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/trades][%d] listTradesUnauthorized  %+v", 401, o.Payload)
}

func (o *ListTradesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(ListTradesUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListTradesNotFound creates a ListTradesNotFound with default headers values
func NewListTradesNotFound() *ListTradesNotFound {
	return &ListTradesNotFound{}
}

/*ListTradesNotFound handles this case with default header values.

Not Found. The client has attempted to access an entity that does not exist.
*/
type ListTradesNotFound struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *ListTradesNotFoundBody
}

func (o *ListTradesNotFound) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/trades][%d] listTradesNotFound  %+v", 404, o.Payload)
}

func (o *ListTradesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(ListTradesNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListTradesMethodNotAllowed creates a ListTradesMethodNotAllowed with default headers values
func NewListTradesMethodNotAllowed() *ListTradesMethodNotAllowed {
	return &ListTradesMethodNotAllowed{}
}

/*ListTradesMethodNotAllowed handles this case with default header values.

Method Not Allowed. The client has attempted to access an endpoint using an HTTP method that is not supported.
*/
type ListTradesMethodNotAllowed struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *ListTradesMethodNotAllowedBody
}

func (o *ListTradesMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/trades][%d] listTradesMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *ListTradesMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(ListTradesMethodNotAllowedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ListTradesMethodNotAllowedBody list trades method not allowed body
swagger:model ListTradesMethodNotAllowedBody
*/
type ListTradesMethodNotAllowedBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`
}

// Validate validates this list trades method not allowed body
func (o *ListTradesMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListTradesMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListTradesMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res ListTradesMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListTradesNotFoundBody list trades not found body
swagger:model ListTradesNotFoundBody
*/
type ListTradesNotFoundBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`
}

// Validate validates this list trades not found body
func (o *ListTradesNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListTradesNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListTradesNotFoundBody) UnmarshalBinary(b []byte) error {
	var res ListTradesNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListTradesOKBody list trades o k body
swagger:model ListTradesOKBody
*/
type ListTradesOKBody struct {

	// The ID of the most recent Transaction created for the Account
	LastTransactionID string `json:"lastTransactionID,omitempty"`

	// The list of Trade detail objects
	Trades []*models.Trade `json:"trades"`
}

// Validate validates this list trades o k body
func (o *ListTradesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTrades(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListTradesOKBody) validateTrades(formats strfmt.Registry) error {

	if swag.IsZero(o.Trades) { // not required
		return nil
	}

	for i := 0; i < len(o.Trades); i++ {
		if swag.IsZero(o.Trades[i]) { // not required
			continue
		}

		if o.Trades[i] != nil {
			if err := o.Trades[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listTradesOK" + "." + "trades" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListTradesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListTradesOKBody) UnmarshalBinary(b []byte) error {
	var res ListTradesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListTradesUnauthorizedBody list trades unauthorized body
swagger:model ListTradesUnauthorizedBody
*/
type ListTradesUnauthorizedBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`
}

// Validate validates this list trades unauthorized body
func (o *ListTradesUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListTradesUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListTradesUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res ListTradesUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
