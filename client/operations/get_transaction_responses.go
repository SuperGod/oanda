// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/SuperGod/oanda/models"
)

// GetTransactionReader is a Reader for the GetTransaction structure.
type GetTransactionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTransactionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetTransactionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetTransactionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetTransactionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewGetTransactionMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetTransactionOK creates a GetTransactionOK with default headers values
func NewGetTransactionOK() *GetTransactionOK {
	return &GetTransactionOK{}
}

/*GetTransactionOK handles this case with default header values.

The details of the requested Transaction are provided.
*/
type GetTransactionOK struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *GetTransactionOKBody
}

func (o *GetTransactionOK) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/transactions/{transactionID}][%d] getTransactionOK  %+v", 200, o.Payload)
}

func (o *GetTransactionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(GetTransactionOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTransactionUnauthorized creates a GetTransactionUnauthorized with default headers values
func NewGetTransactionUnauthorized() *GetTransactionUnauthorized {
	return &GetTransactionUnauthorized{}
}

/*GetTransactionUnauthorized handles this case with default header values.

Unauthorized. The endpoint being access required the client to authenticated, however the the authentication token is invalid or has not been provided.
*/
type GetTransactionUnauthorized struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *GetTransactionUnauthorizedBody
}

func (o *GetTransactionUnauthorized) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/transactions/{transactionID}][%d] getTransactionUnauthorized  %+v", 401, o.Payload)
}

func (o *GetTransactionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(GetTransactionUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTransactionNotFound creates a GetTransactionNotFound with default headers values
func NewGetTransactionNotFound() *GetTransactionNotFound {
	return &GetTransactionNotFound{}
}

/*GetTransactionNotFound handles this case with default header values.

Not Found. The client has attempted to access an entity that does not exist.
*/
type GetTransactionNotFound struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *GetTransactionNotFoundBody
}

func (o *GetTransactionNotFound) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/transactions/{transactionID}][%d] getTransactionNotFound  %+v", 404, o.Payload)
}

func (o *GetTransactionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(GetTransactionNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTransactionMethodNotAllowed creates a GetTransactionMethodNotAllowed with default headers values
func NewGetTransactionMethodNotAllowed() *GetTransactionMethodNotAllowed {
	return &GetTransactionMethodNotAllowed{}
}

/*GetTransactionMethodNotAllowed handles this case with default header values.

Method Not Allowed. The client has attempted to access an endpoint using an HTTP method that is not supported.
*/
type GetTransactionMethodNotAllowed struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *GetTransactionMethodNotAllowedBody
}

func (o *GetTransactionMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/transactions/{transactionID}][%d] getTransactionMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *GetTransactionMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(GetTransactionMethodNotAllowedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetTransactionMethodNotAllowedBody get transaction method not allowed body
swagger:model GetTransactionMethodNotAllowedBody
*/
type GetTransactionMethodNotAllowedBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`
}

// Validate validates this get transaction method not allowed body
func (o *GetTransactionMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res GetTransactionMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionNotFoundBody get transaction not found body
swagger:model GetTransactionNotFoundBody
*/
type GetTransactionNotFoundBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`
}

// Validate validates this get transaction not found body
func (o *GetTransactionNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetTransactionNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionOKBody get transaction o k body
swagger:model GetTransactionOKBody
*/
type GetTransactionOKBody struct {

	// The ID of the most recent Transaction created for the Account
	LastTransactionID string `json:"lastTransactionID,omitempty"`

	// transaction
	Transaction *models.Transaction `json:"transaction,omitempty"`
}

// Validate validates this get transaction o k body
func (o *GetTransactionOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTransaction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTransactionOKBody) validateTransaction(formats strfmt.Registry) error {

	if swag.IsZero(o.Transaction) { // not required
		return nil
	}

	if o.Transaction != nil {
		if err := o.Transaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTransactionOK" + "." + "transaction")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionOKBody) UnmarshalBinary(b []byte) error {
	var res GetTransactionOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionUnauthorizedBody get transaction unauthorized body
swagger:model GetTransactionUnauthorizedBody
*/
type GetTransactionUnauthorizedBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`
}

// Validate validates this get transaction unauthorized body
func (o *GetTransactionUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res GetTransactionUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
