// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/SuperGod/oanda/models"
)

// GetTransactionsSinceIDReader is a Reader for the GetTransactionsSinceID structure.
type GetTransactionsSinceIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTransactionsSinceIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetTransactionsSinceIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetTransactionsSinceIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetTransactionsSinceIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetTransactionsSinceIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewGetTransactionsSinceIDMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 416:
		result := NewGetTransactionsSinceIDRequestRangeNotSatisfiable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetTransactionsSinceIDOK creates a GetTransactionsSinceIDOK with default headers values
func NewGetTransactionsSinceIDOK() *GetTransactionsSinceIDOK {
	return &GetTransactionsSinceIDOK{}
}

/*GetTransactionsSinceIDOK handles this case with default header values.

The requested time range of Transactions are provided.
*/
type GetTransactionsSinceIDOK struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *GetTransactionsSinceIDOKBody
}

func (o *GetTransactionsSinceIDOK) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/transactions/sinceid][%d] getTransactionsSinceIdOK  %+v", 200, o.Payload)
}

func (o *GetTransactionsSinceIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(GetTransactionsSinceIDOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTransactionsSinceIDBadRequest creates a GetTransactionsSinceIDBadRequest with default headers values
func NewGetTransactionsSinceIDBadRequest() *GetTransactionsSinceIDBadRequest {
	return &GetTransactionsSinceIDBadRequest{}
}

/*GetTransactionsSinceIDBadRequest handles this case with default header values.

Bad Request. The client has provided invalid data to be processed by the server.
*/
type GetTransactionsSinceIDBadRequest struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *GetTransactionsSinceIDBadRequestBody
}

func (o *GetTransactionsSinceIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/transactions/sinceid][%d] getTransactionsSinceIdBadRequest  %+v", 400, o.Payload)
}

func (o *GetTransactionsSinceIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(GetTransactionsSinceIDBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTransactionsSinceIDUnauthorized creates a GetTransactionsSinceIDUnauthorized with default headers values
func NewGetTransactionsSinceIDUnauthorized() *GetTransactionsSinceIDUnauthorized {
	return &GetTransactionsSinceIDUnauthorized{}
}

/*GetTransactionsSinceIDUnauthorized handles this case with default header values.

Unauthorized. The endpoint being access required the client to authenticated, however the the authentication token is invalid or has not been provided.
*/
type GetTransactionsSinceIDUnauthorized struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *GetTransactionsSinceIDUnauthorizedBody
}

func (o *GetTransactionsSinceIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/transactions/sinceid][%d] getTransactionsSinceIdUnauthorized  %+v", 401, o.Payload)
}

func (o *GetTransactionsSinceIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(GetTransactionsSinceIDUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTransactionsSinceIDNotFound creates a GetTransactionsSinceIDNotFound with default headers values
func NewGetTransactionsSinceIDNotFound() *GetTransactionsSinceIDNotFound {
	return &GetTransactionsSinceIDNotFound{}
}

/*GetTransactionsSinceIDNotFound handles this case with default header values.

Not Found. The client has attempted to access an entity that does not exist.
*/
type GetTransactionsSinceIDNotFound struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *GetTransactionsSinceIDNotFoundBody
}

func (o *GetTransactionsSinceIDNotFound) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/transactions/sinceid][%d] getTransactionsSinceIdNotFound  %+v", 404, o.Payload)
}

func (o *GetTransactionsSinceIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(GetTransactionsSinceIDNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTransactionsSinceIDMethodNotAllowed creates a GetTransactionsSinceIDMethodNotAllowed with default headers values
func NewGetTransactionsSinceIDMethodNotAllowed() *GetTransactionsSinceIDMethodNotAllowed {
	return &GetTransactionsSinceIDMethodNotAllowed{}
}

/*GetTransactionsSinceIDMethodNotAllowed handles this case with default header values.

Method Not Allowed. The client has attempted to access an endpoint using an HTTP method that is not supported.
*/
type GetTransactionsSinceIDMethodNotAllowed struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *GetTransactionsSinceIDMethodNotAllowedBody
}

func (o *GetTransactionsSinceIDMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/transactions/sinceid][%d] getTransactionsSinceIdMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *GetTransactionsSinceIDMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(GetTransactionsSinceIDMethodNotAllowedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTransactionsSinceIDRequestRangeNotSatisfiable creates a GetTransactionsSinceIDRequestRangeNotSatisfiable with default headers values
func NewGetTransactionsSinceIDRequestRangeNotSatisfiable() *GetTransactionsSinceIDRequestRangeNotSatisfiable {
	return &GetTransactionsSinceIDRequestRangeNotSatisfiable{}
}

/*GetTransactionsSinceIDRequestRangeNotSatisfiable handles this case with default header values.

Range Not Satisfiable. The client has specified a range that is invalid or cannot be processed.
*/
type GetTransactionsSinceIDRequestRangeNotSatisfiable struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *GetTransactionsSinceIDRequestRangeNotSatisfiableBody
}

func (o *GetTransactionsSinceIDRequestRangeNotSatisfiable) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/transactions/sinceid][%d] getTransactionsSinceIdRequestRangeNotSatisfiable  %+v", 416, o.Payload)
}

func (o *GetTransactionsSinceIDRequestRangeNotSatisfiable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(GetTransactionsSinceIDRequestRangeNotSatisfiableBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetTransactionsSinceIDBadRequestBody get transactions since ID bad request body
swagger:model GetTransactionsSinceIDBadRequestBody
*/
type GetTransactionsSinceIDBadRequestBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`
}

// Validate validates this get transactions since ID bad request body
func (o *GetTransactionsSinceIDBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionsSinceIDBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionsSinceIDBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetTransactionsSinceIDBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionsSinceIDMethodNotAllowedBody get transactions since ID method not allowed body
swagger:model GetTransactionsSinceIDMethodNotAllowedBody
*/
type GetTransactionsSinceIDMethodNotAllowedBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`
}

// Validate validates this get transactions since ID method not allowed body
func (o *GetTransactionsSinceIDMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionsSinceIDMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionsSinceIDMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res GetTransactionsSinceIDMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionsSinceIDNotFoundBody get transactions since ID not found body
swagger:model GetTransactionsSinceIDNotFoundBody
*/
type GetTransactionsSinceIDNotFoundBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`
}

// Validate validates this get transactions since ID not found body
func (o *GetTransactionsSinceIDNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionsSinceIDNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionsSinceIDNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetTransactionsSinceIDNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionsSinceIDOKBody get transactions since ID o k body
swagger:model GetTransactionsSinceIDOKBody
*/
type GetTransactionsSinceIDOKBody struct {

	// The ID of the most recent Transaction created for the Account
	LastTransactionID string `json:"lastTransactionID,omitempty"`

	// The list of Transactions that satisfy the request.
	Transactions []*models.Transaction `json:"transactions"`
}

// Validate validates this get transactions since ID o k body
func (o *GetTransactionsSinceIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTransactions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTransactionsSinceIDOKBody) validateTransactions(formats strfmt.Registry) error {

	if swag.IsZero(o.Transactions) { // not required
		return nil
	}

	for i := 0; i < len(o.Transactions); i++ {
		if swag.IsZero(o.Transactions[i]) { // not required
			continue
		}

		if o.Transactions[i] != nil {
			if err := o.Transactions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getTransactionsSinceIdOK" + "." + "transactions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionsSinceIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionsSinceIDOKBody) UnmarshalBinary(b []byte) error {
	var res GetTransactionsSinceIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionsSinceIDRequestRangeNotSatisfiableBody get transactions since ID request range not satisfiable body
swagger:model GetTransactionsSinceIDRequestRangeNotSatisfiableBody
*/
type GetTransactionsSinceIDRequestRangeNotSatisfiableBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`
}

// Validate validates this get transactions since ID request range not satisfiable body
func (o *GetTransactionsSinceIDRequestRangeNotSatisfiableBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionsSinceIDRequestRangeNotSatisfiableBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionsSinceIDRequestRangeNotSatisfiableBody) UnmarshalBinary(b []byte) error {
	var res GetTransactionsSinceIDRequestRangeNotSatisfiableBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionsSinceIDUnauthorizedBody get transactions since ID unauthorized body
swagger:model GetTransactionsSinceIDUnauthorizedBody
*/
type GetTransactionsSinceIDUnauthorizedBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`
}

// Validate validates this get transactions since ID unauthorized body
func (o *GetTransactionsSinceIDUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionsSinceIDUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionsSinceIDUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res GetTransactionsSinceIDUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
