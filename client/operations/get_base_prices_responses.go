// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/SuperGod/oanda/models"
)

// GetBasePricesReader is a Reader for the GetBasePrices structure.
type GetBasePricesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetBasePricesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetBasePricesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetBasePricesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetBasePricesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetBasePricesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewGetBasePricesMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetBasePricesOK creates a GetBasePricesOK with default headers values
func NewGetBasePricesOK() *GetBasePricesOK {
	return &GetBasePricesOK{}
}

/*GetBasePricesOK handles this case with default header values.

Pricing information has been successfully provided.
*/
type GetBasePricesOK struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *GetBasePricesOKBody
}

func (o *GetBasePricesOK) Error() string {
	return fmt.Sprintf("[GET /pricing][%d] getBasePricesOK  %+v", 200, o.Payload)
}

func (o *GetBasePricesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(GetBasePricesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBasePricesBadRequest creates a GetBasePricesBadRequest with default headers values
func NewGetBasePricesBadRequest() *GetBasePricesBadRequest {
	return &GetBasePricesBadRequest{}
}

/*GetBasePricesBadRequest handles this case with default header values.

Bad Request. The client has provided invalid data to be processed by the server.
*/
type GetBasePricesBadRequest struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *GetBasePricesBadRequestBody
}

func (o *GetBasePricesBadRequest) Error() string {
	return fmt.Sprintf("[GET /pricing][%d] getBasePricesBadRequest  %+v", 400, o.Payload)
}

func (o *GetBasePricesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(GetBasePricesBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBasePricesUnauthorized creates a GetBasePricesUnauthorized with default headers values
func NewGetBasePricesUnauthorized() *GetBasePricesUnauthorized {
	return &GetBasePricesUnauthorized{}
}

/*GetBasePricesUnauthorized handles this case with default header values.

Unauthorized. The endpoint being access required the client to authenticated, however the the authentication token is invalid or has not been provided.
*/
type GetBasePricesUnauthorized struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *GetBasePricesUnauthorizedBody
}

func (o *GetBasePricesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /pricing][%d] getBasePricesUnauthorized  %+v", 401, o.Payload)
}

func (o *GetBasePricesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(GetBasePricesUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBasePricesNotFound creates a GetBasePricesNotFound with default headers values
func NewGetBasePricesNotFound() *GetBasePricesNotFound {
	return &GetBasePricesNotFound{}
}

/*GetBasePricesNotFound handles this case with default header values.

Not Found. The client has attempted to access an entity that does not exist.
*/
type GetBasePricesNotFound struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *GetBasePricesNotFoundBody
}

func (o *GetBasePricesNotFound) Error() string {
	return fmt.Sprintf("[GET /pricing][%d] getBasePricesNotFound  %+v", 404, o.Payload)
}

func (o *GetBasePricesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(GetBasePricesNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBasePricesMethodNotAllowed creates a GetBasePricesMethodNotAllowed with default headers values
func NewGetBasePricesMethodNotAllowed() *GetBasePricesMethodNotAllowed {
	return &GetBasePricesMethodNotAllowed{}
}

/*GetBasePricesMethodNotAllowed handles this case with default header values.

Method Not Allowed. The client has attempted to access an endpoint using an HTTP method that is not supported.
*/
type GetBasePricesMethodNotAllowed struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *GetBasePricesMethodNotAllowedBody
}

func (o *GetBasePricesMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /pricing][%d] getBasePricesMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *GetBasePricesMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(GetBasePricesMethodNotAllowedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetBasePricesBadRequestBody get base prices bad request body
swagger:model GetBasePricesBadRequestBody
*/
type GetBasePricesBadRequestBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`
}

// Validate validates this get base prices bad request body
func (o *GetBasePricesBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetBasePricesBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBasePricesBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetBasePricesBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetBasePricesMethodNotAllowedBody get base prices method not allowed body
swagger:model GetBasePricesMethodNotAllowedBody
*/
type GetBasePricesMethodNotAllowedBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`
}

// Validate validates this get base prices method not allowed body
func (o *GetBasePricesMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetBasePricesMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBasePricesMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res GetBasePricesMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetBasePricesNotFoundBody get base prices not found body
swagger:model GetBasePricesNotFoundBody
*/
type GetBasePricesNotFoundBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`
}

// Validate validates this get base prices not found body
func (o *GetBasePricesNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetBasePricesNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBasePricesNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetBasePricesNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetBasePricesOKBody get base prices o k body
swagger:model GetBasePricesOKBody
*/
type GetBasePricesOKBody struct {

	// The list of prices that satisfy the request.
	Prices []*models.Price `json:"prices"`
}

// Validate validates this get base prices o k body
func (o *GetBasePricesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePrices(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBasePricesOKBody) validatePrices(formats strfmt.Registry) error {

	if swag.IsZero(o.Prices) { // not required
		return nil
	}

	for i := 0; i < len(o.Prices); i++ {
		if swag.IsZero(o.Prices[i]) { // not required
			continue
		}

		if o.Prices[i] != nil {
			if err := o.Prices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getBasePricesOK" + "." + "prices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetBasePricesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBasePricesOKBody) UnmarshalBinary(b []byte) error {
	var res GetBasePricesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetBasePricesUnauthorizedBody get base prices unauthorized body
swagger:model GetBasePricesUnauthorizedBody
*/
type GetBasePricesUnauthorizedBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`
}

// Validate validates this get base prices unauthorized body
func (o *GetBasePricesUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetBasePricesUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBasePricesUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res GetBasePricesUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
