// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/SuperGod/oanda/models"
)

// GetInstrumentPriceRangeReader is a Reader for the GetInstrumentPriceRange structure.
type GetInstrumentPriceRangeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetInstrumentPriceRangeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetInstrumentPriceRangeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetInstrumentPriceRangeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetInstrumentPriceRangeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetInstrumentPriceRangeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewGetInstrumentPriceRangeMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetInstrumentPriceRangeOK creates a GetInstrumentPriceRangeOK with default headers values
func NewGetInstrumentPriceRangeOK() *GetInstrumentPriceRangeOK {
	return &GetInstrumentPriceRangeOK{}
}

/*GetInstrumentPriceRangeOK handles this case with default header values.

Pricing information has been successfully provided.
*/
type GetInstrumentPriceRangeOK struct {
	/*A link to the next page of results if the results were paginated
	 */
	Link string
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *GetInstrumentPriceRangeOKBody
}

func (o *GetInstrumentPriceRangeOK) Error() string {
	return fmt.Sprintf("[GET /instruments/{instrument}/price/range][%d] getInstrumentPriceRangeOK  %+v", 200, o.Payload)
}

func (o *GetInstrumentPriceRangeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Link
	o.Link = response.GetHeader("Link")

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(GetInstrumentPriceRangeOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInstrumentPriceRangeBadRequest creates a GetInstrumentPriceRangeBadRequest with default headers values
func NewGetInstrumentPriceRangeBadRequest() *GetInstrumentPriceRangeBadRequest {
	return &GetInstrumentPriceRangeBadRequest{}
}

/*GetInstrumentPriceRangeBadRequest handles this case with default header values.

Bad Request. The client has provided invalid data to be processed by the server.
*/
type GetInstrumentPriceRangeBadRequest struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *GetInstrumentPriceRangeBadRequestBody
}

func (o *GetInstrumentPriceRangeBadRequest) Error() string {
	return fmt.Sprintf("[GET /instruments/{instrument}/price/range][%d] getInstrumentPriceRangeBadRequest  %+v", 400, o.Payload)
}

func (o *GetInstrumentPriceRangeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(GetInstrumentPriceRangeBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInstrumentPriceRangeUnauthorized creates a GetInstrumentPriceRangeUnauthorized with default headers values
func NewGetInstrumentPriceRangeUnauthorized() *GetInstrumentPriceRangeUnauthorized {
	return &GetInstrumentPriceRangeUnauthorized{}
}

/*GetInstrumentPriceRangeUnauthorized handles this case with default header values.

Unauthorized. The endpoint being access required the client to authenticated, however the the authentication token is invalid or has not been provided.
*/
type GetInstrumentPriceRangeUnauthorized struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *GetInstrumentPriceRangeUnauthorizedBody
}

func (o *GetInstrumentPriceRangeUnauthorized) Error() string {
	return fmt.Sprintf("[GET /instruments/{instrument}/price/range][%d] getInstrumentPriceRangeUnauthorized  %+v", 401, o.Payload)
}

func (o *GetInstrumentPriceRangeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(GetInstrumentPriceRangeUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInstrumentPriceRangeNotFound creates a GetInstrumentPriceRangeNotFound with default headers values
func NewGetInstrumentPriceRangeNotFound() *GetInstrumentPriceRangeNotFound {
	return &GetInstrumentPriceRangeNotFound{}
}

/*GetInstrumentPriceRangeNotFound handles this case with default header values.

Not Found. The client has attempted to access an entity that does not exist.
*/
type GetInstrumentPriceRangeNotFound struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *GetInstrumentPriceRangeNotFoundBody
}

func (o *GetInstrumentPriceRangeNotFound) Error() string {
	return fmt.Sprintf("[GET /instruments/{instrument}/price/range][%d] getInstrumentPriceRangeNotFound  %+v", 404, o.Payload)
}

func (o *GetInstrumentPriceRangeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(GetInstrumentPriceRangeNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInstrumentPriceRangeMethodNotAllowed creates a GetInstrumentPriceRangeMethodNotAllowed with default headers values
func NewGetInstrumentPriceRangeMethodNotAllowed() *GetInstrumentPriceRangeMethodNotAllowed {
	return &GetInstrumentPriceRangeMethodNotAllowed{}
}

/*GetInstrumentPriceRangeMethodNotAllowed handles this case with default header values.

Method Not Allowed. The client has attempted to access an endpoint using an HTTP method that is not supported.
*/
type GetInstrumentPriceRangeMethodNotAllowed struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *GetInstrumentPriceRangeMethodNotAllowedBody
}

func (o *GetInstrumentPriceRangeMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /instruments/{instrument}/price/range][%d] getInstrumentPriceRangeMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *GetInstrumentPriceRangeMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(GetInstrumentPriceRangeMethodNotAllowedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetInstrumentPriceRangeBadRequestBody get instrument price range bad request body
swagger:model GetInstrumentPriceRangeBadRequestBody
*/
type GetInstrumentPriceRangeBadRequestBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`
}

// Validate validates this get instrument price range bad request body
func (o *GetInstrumentPriceRangeBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentPriceRangeBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentPriceRangeBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetInstrumentPriceRangeBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInstrumentPriceRangeMethodNotAllowedBody get instrument price range method not allowed body
swagger:model GetInstrumentPriceRangeMethodNotAllowedBody
*/
type GetInstrumentPriceRangeMethodNotAllowedBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`
}

// Validate validates this get instrument price range method not allowed body
func (o *GetInstrumentPriceRangeMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentPriceRangeMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentPriceRangeMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res GetInstrumentPriceRangeMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInstrumentPriceRangeNotFoundBody get instrument price range not found body
swagger:model GetInstrumentPriceRangeNotFoundBody
*/
type GetInstrumentPriceRangeNotFoundBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`
}

// Validate validates this get instrument price range not found body
func (o *GetInstrumentPriceRangeNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentPriceRangeNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentPriceRangeNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetInstrumentPriceRangeNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInstrumentPriceRangeOKBody get instrument price range o k body
swagger:model GetInstrumentPriceRangeOKBody
*/
type GetInstrumentPriceRangeOKBody struct {

	// The list of prices that satisfy the request.
	Prices []*models.Price `json:"prices"`
}

// Validate validates this get instrument price range o k body
func (o *GetInstrumentPriceRangeOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePrices(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentPriceRangeOKBody) validatePrices(formats strfmt.Registry) error {

	if swag.IsZero(o.Prices) { // not required
		return nil
	}

	for i := 0; i < len(o.Prices); i++ {
		if swag.IsZero(o.Prices[i]) { // not required
			continue
		}

		if o.Prices[i] != nil {
			if err := o.Prices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getInstrumentPriceRangeOK" + "." + "prices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentPriceRangeOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentPriceRangeOKBody) UnmarshalBinary(b []byte) error {
	var res GetInstrumentPriceRangeOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInstrumentPriceRangeUnauthorizedBody get instrument price range unauthorized body
swagger:model GetInstrumentPriceRangeUnauthorizedBody
*/
type GetInstrumentPriceRangeUnauthorizedBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`
}

// Validate validates this get instrument price range unauthorized body
func (o *GetInstrumentPriceRangeUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentPriceRangeUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentPriceRangeUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res GetInstrumentPriceRangeUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
