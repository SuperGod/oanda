// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/SuperGod/oanda/models"
)

// GetTransactionRangeReader is a Reader for the GetTransactionRange structure.
type GetTransactionRangeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTransactionRangeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetTransactionRangeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetTransactionRangeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetTransactionRangeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetTransactionRangeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewGetTransactionRangeMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 416:
		result := NewGetTransactionRangeRequestRangeNotSatisfiable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetTransactionRangeOK creates a GetTransactionRangeOK with default headers values
func NewGetTransactionRangeOK() *GetTransactionRangeOK {
	return &GetTransactionRangeOK{}
}

/*GetTransactionRangeOK handles this case with default header values.

The requested time range of Transactions are provided.
*/
type GetTransactionRangeOK struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *GetTransactionRangeOKBody
}

func (o *GetTransactionRangeOK) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/transactions/idrange][%d] getTransactionRangeOK  %+v", 200, o.Payload)
}

func (o *GetTransactionRangeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(GetTransactionRangeOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTransactionRangeBadRequest creates a GetTransactionRangeBadRequest with default headers values
func NewGetTransactionRangeBadRequest() *GetTransactionRangeBadRequest {
	return &GetTransactionRangeBadRequest{}
}

/*GetTransactionRangeBadRequest handles this case with default header values.

Bad Request. The client has provided invalid data to be processed by the server.
*/
type GetTransactionRangeBadRequest struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *GetTransactionRangeBadRequestBody
}

func (o *GetTransactionRangeBadRequest) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/transactions/idrange][%d] getTransactionRangeBadRequest  %+v", 400, o.Payload)
}

func (o *GetTransactionRangeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(GetTransactionRangeBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTransactionRangeUnauthorized creates a GetTransactionRangeUnauthorized with default headers values
func NewGetTransactionRangeUnauthorized() *GetTransactionRangeUnauthorized {
	return &GetTransactionRangeUnauthorized{}
}

/*GetTransactionRangeUnauthorized handles this case with default header values.

Unauthorized. The endpoint being access required the client to authenticated, however the the authentication token is invalid or has not been provided.
*/
type GetTransactionRangeUnauthorized struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *GetTransactionRangeUnauthorizedBody
}

func (o *GetTransactionRangeUnauthorized) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/transactions/idrange][%d] getTransactionRangeUnauthorized  %+v", 401, o.Payload)
}

func (o *GetTransactionRangeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(GetTransactionRangeUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTransactionRangeNotFound creates a GetTransactionRangeNotFound with default headers values
func NewGetTransactionRangeNotFound() *GetTransactionRangeNotFound {
	return &GetTransactionRangeNotFound{}
}

/*GetTransactionRangeNotFound handles this case with default header values.

Not Found. The client has attempted to access an entity that does not exist.
*/
type GetTransactionRangeNotFound struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *GetTransactionRangeNotFoundBody
}

func (o *GetTransactionRangeNotFound) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/transactions/idrange][%d] getTransactionRangeNotFound  %+v", 404, o.Payload)
}

func (o *GetTransactionRangeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(GetTransactionRangeNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTransactionRangeMethodNotAllowed creates a GetTransactionRangeMethodNotAllowed with default headers values
func NewGetTransactionRangeMethodNotAllowed() *GetTransactionRangeMethodNotAllowed {
	return &GetTransactionRangeMethodNotAllowed{}
}

/*GetTransactionRangeMethodNotAllowed handles this case with default header values.

Method Not Allowed. The client has attempted to access an endpoint using an HTTP method that is not supported.
*/
type GetTransactionRangeMethodNotAllowed struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *GetTransactionRangeMethodNotAllowedBody
}

func (o *GetTransactionRangeMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/transactions/idrange][%d] getTransactionRangeMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *GetTransactionRangeMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(GetTransactionRangeMethodNotAllowedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTransactionRangeRequestRangeNotSatisfiable creates a GetTransactionRangeRequestRangeNotSatisfiable with default headers values
func NewGetTransactionRangeRequestRangeNotSatisfiable() *GetTransactionRangeRequestRangeNotSatisfiable {
	return &GetTransactionRangeRequestRangeNotSatisfiable{}
}

/*GetTransactionRangeRequestRangeNotSatisfiable handles this case with default header values.

Range Not Satisfiable. The client has specified a range that is invalid or cannot be processed.
*/
type GetTransactionRangeRequestRangeNotSatisfiable struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *GetTransactionRangeRequestRangeNotSatisfiableBody
}

func (o *GetTransactionRangeRequestRangeNotSatisfiable) Error() string {
	return fmt.Sprintf("[GET /accounts/{accountID}/transactions/idrange][%d] getTransactionRangeRequestRangeNotSatisfiable  %+v", 416, o.Payload)
}

func (o *GetTransactionRangeRequestRangeNotSatisfiable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(GetTransactionRangeRequestRangeNotSatisfiableBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetTransactionRangeBadRequestBody get transaction range bad request body
swagger:model GetTransactionRangeBadRequestBody
*/
type GetTransactionRangeBadRequestBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`
}

// Validate validates this get transaction range bad request body
func (o *GetTransactionRangeBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionRangeBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionRangeBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetTransactionRangeBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionRangeMethodNotAllowedBody get transaction range method not allowed body
swagger:model GetTransactionRangeMethodNotAllowedBody
*/
type GetTransactionRangeMethodNotAllowedBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`
}

// Validate validates this get transaction range method not allowed body
func (o *GetTransactionRangeMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionRangeMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionRangeMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res GetTransactionRangeMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionRangeNotFoundBody get transaction range not found body
swagger:model GetTransactionRangeNotFoundBody
*/
type GetTransactionRangeNotFoundBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`
}

// Validate validates this get transaction range not found body
func (o *GetTransactionRangeNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionRangeNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionRangeNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetTransactionRangeNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionRangeOKBody get transaction range o k body
swagger:model GetTransactionRangeOKBody
*/
type GetTransactionRangeOKBody struct {

	// The ID of the most recent Transaction created for the Account
	LastTransactionID string `json:"lastTransactionID,omitempty"`

	// The list of Transactions that satisfy the request.
	Transactions []*models.Transaction `json:"transactions"`
}

// Validate validates this get transaction range o k body
func (o *GetTransactionRangeOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTransactions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTransactionRangeOKBody) validateTransactions(formats strfmt.Registry) error {

	if swag.IsZero(o.Transactions) { // not required
		return nil
	}

	for i := 0; i < len(o.Transactions); i++ {
		if swag.IsZero(o.Transactions[i]) { // not required
			continue
		}

		if o.Transactions[i] != nil {
			if err := o.Transactions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getTransactionRangeOK" + "." + "transactions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionRangeOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionRangeOKBody) UnmarshalBinary(b []byte) error {
	var res GetTransactionRangeOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionRangeRequestRangeNotSatisfiableBody get transaction range request range not satisfiable body
swagger:model GetTransactionRangeRequestRangeNotSatisfiableBody
*/
type GetTransactionRangeRequestRangeNotSatisfiableBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`
}

// Validate validates this get transaction range request range not satisfiable body
func (o *GetTransactionRangeRequestRangeNotSatisfiableBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionRangeRequestRangeNotSatisfiableBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionRangeRequestRangeNotSatisfiableBody) UnmarshalBinary(b []byte) error {
	var res GetTransactionRangeRequestRangeNotSatisfiableBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionRangeUnauthorizedBody get transaction range unauthorized body
swagger:model GetTransactionRangeUnauthorizedBody
*/
type GetTransactionRangeUnauthorizedBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`
}

// Validate validates this get transaction range unauthorized body
func (o *GetTransactionRangeUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionRangeUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionRangeUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res GetTransactionRangeUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
