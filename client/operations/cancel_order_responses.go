// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/SuperGod/oanda/models"
)

// CancelOrderReader is a Reader for the CancelOrder structure.
type CancelOrderReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CancelOrderReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewCancelOrderOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewCancelOrderUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewCancelOrderNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewCancelOrderMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCancelOrderOK creates a CancelOrderOK with default headers values
func NewCancelOrderOK() *CancelOrderOK {
	return &CancelOrderOK{}
}

/*CancelOrderOK handles this case with default header values.

The Order was cancelled as specified
*/
type CancelOrderOK struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *CancelOrderOKBody
}

func (o *CancelOrderOK) Error() string {
	return fmt.Sprintf("[PUT /accounts/{accountID}/orders/{orderSpecifier}/cancel][%d] cancelOrderOK  %+v", 200, o.Payload)
}

func (o *CancelOrderOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(CancelOrderOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelOrderUnauthorized creates a CancelOrderUnauthorized with default headers values
func NewCancelOrderUnauthorized() *CancelOrderUnauthorized {
	return &CancelOrderUnauthorized{}
}

/*CancelOrderUnauthorized handles this case with default header values.

Unauthorized. The endpoint being access required the client to authenticated, however the the authentication token is invalid or has not been provided.
*/
type CancelOrderUnauthorized struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *CancelOrderUnauthorizedBody
}

func (o *CancelOrderUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /accounts/{accountID}/orders/{orderSpecifier}/cancel][%d] cancelOrderUnauthorized  %+v", 401, o.Payload)
}

func (o *CancelOrderUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(CancelOrderUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelOrderNotFound creates a CancelOrderNotFound with default headers values
func NewCancelOrderNotFound() *CancelOrderNotFound {
	return &CancelOrderNotFound{}
}

/*CancelOrderNotFound handles this case with default header values.

The Account or Order specified does not exist.
*/
type CancelOrderNotFound struct {
	Payload *CancelOrderNotFoundBody
}

func (o *CancelOrderNotFound) Error() string {
	return fmt.Sprintf("[PUT /accounts/{accountID}/orders/{orderSpecifier}/cancel][%d] cancelOrderNotFound  %+v", 404, o.Payload)
}

func (o *CancelOrderNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CancelOrderNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelOrderMethodNotAllowed creates a CancelOrderMethodNotAllowed with default headers values
func NewCancelOrderMethodNotAllowed() *CancelOrderMethodNotAllowed {
	return &CancelOrderMethodNotAllowed{}
}

/*CancelOrderMethodNotAllowed handles this case with default header values.

Method Not Allowed. The client has attempted to access an endpoint using an HTTP method that is not supported.
*/
type CancelOrderMethodNotAllowed struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *CancelOrderMethodNotAllowedBody
}

func (o *CancelOrderMethodNotAllowed) Error() string {
	return fmt.Sprintf("[PUT /accounts/{accountID}/orders/{orderSpecifier}/cancel][%d] cancelOrderMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *CancelOrderMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(CancelOrderMethodNotAllowedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*CancelOrderMethodNotAllowedBody cancel order method not allowed body
swagger:model CancelOrderMethodNotAllowedBody
*/
type CancelOrderMethodNotAllowedBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`
}

// Validate validates this cancel order method not allowed body
func (o *CancelOrderMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CancelOrderMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CancelOrderMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res CancelOrderMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CancelOrderNotFoundBody cancel order not found body
swagger:model CancelOrderNotFoundBody
*/
type CancelOrderNotFoundBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`

	// The ID of the most recent Transaction created for the Account. Only present if the Account exists.
	LastTransactionID string `json:"lastTransactionID,omitempty"`

	// order cancel reject transaction
	OrderCancelRejectTransaction *models.OrderCancelRejectTransaction `json:"orderCancelRejectTransaction,omitempty"`

	// The IDs of all Transactions that were created while satisfying the request. Only present if the Account exists.
	RelatedTransactionIds []string `json:"relatedTransactionIDs"`
}

// Validate validates this cancel order not found body
func (o *CancelOrderNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateOrderCancelRejectTransaction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CancelOrderNotFoundBody) validateOrderCancelRejectTransaction(formats strfmt.Registry) error {

	if swag.IsZero(o.OrderCancelRejectTransaction) { // not required
		return nil
	}

	if o.OrderCancelRejectTransaction != nil {
		if err := o.OrderCancelRejectTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cancelOrderNotFound" + "." + "orderCancelRejectTransaction")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CancelOrderNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CancelOrderNotFoundBody) UnmarshalBinary(b []byte) error {
	var res CancelOrderNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CancelOrderOKBody cancel order o k body
swagger:model CancelOrderOKBody
*/
type CancelOrderOKBody struct {

	// The ID of the most recent Transaction created for the Account
	LastTransactionID string `json:"lastTransactionID,omitempty"`

	// order cancel transaction
	OrderCancelTransaction *models.OrderCancelTransaction `json:"orderCancelTransaction,omitempty"`

	// The IDs of all Transactions that were created while satisfying the request.
	RelatedTransactionIds []string `json:"relatedTransactionIDs"`
}

// Validate validates this cancel order o k body
func (o *CancelOrderOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateOrderCancelTransaction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CancelOrderOKBody) validateOrderCancelTransaction(formats strfmt.Registry) error {

	if swag.IsZero(o.OrderCancelTransaction) { // not required
		return nil
	}

	if o.OrderCancelTransaction != nil {
		if err := o.OrderCancelTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cancelOrderOK" + "." + "orderCancelTransaction")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CancelOrderOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CancelOrderOKBody) UnmarshalBinary(b []byte) error {
	var res CancelOrderOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CancelOrderUnauthorizedBody cancel order unauthorized body
swagger:model CancelOrderUnauthorizedBody
*/
type CancelOrderUnauthorizedBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`
}

// Validate validates this cancel order unauthorized body
func (o *CancelOrderUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CancelOrderUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CancelOrderUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res CancelOrderUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
