// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetInstrumentPriceRangeParams creates a new GetInstrumentPriceRangeParams object
// with the default values initialized.
func NewGetInstrumentPriceRangeParams() *GetInstrumentPriceRangeParams {
	var ()
	return &GetInstrumentPriceRangeParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetInstrumentPriceRangeParamsWithTimeout creates a new GetInstrumentPriceRangeParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetInstrumentPriceRangeParamsWithTimeout(timeout time.Duration) *GetInstrumentPriceRangeParams {
	var ()
	return &GetInstrumentPriceRangeParams{

		timeout: timeout,
	}
}

// NewGetInstrumentPriceRangeParamsWithContext creates a new GetInstrumentPriceRangeParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetInstrumentPriceRangeParamsWithContext(ctx context.Context) *GetInstrumentPriceRangeParams {
	var ()
	return &GetInstrumentPriceRangeParams{

		Context: ctx,
	}
}

// NewGetInstrumentPriceRangeParamsWithHTTPClient creates a new GetInstrumentPriceRangeParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetInstrumentPriceRangeParamsWithHTTPClient(client *http.Client) *GetInstrumentPriceRangeParams {
	var ()
	return &GetInstrumentPriceRangeParams{
		HTTPClient: client,
	}
}

/*GetInstrumentPriceRangeParams contains all the parameters to send to the API endpoint
for the get instrument price range operation typically these are written to a http.Request
*/
type GetInstrumentPriceRangeParams struct {

	/*AcceptDatetimeFormat
	  Format of DateTime fields in the request and response.

	*/
	AcceptDatetimeFormat *string
	/*Authorization
	  The authorization bearer token previously obtained by the client

	*/
	Authorization string
	/*From
	  The start of the time range to fetch prices for.

	*/
	From string
	/*Instrument
	  Name of the Instrument

	*/
	Instrument string
	/*To
	  The end of the time range to fetch prices for. The current time is used if this parameter is not provided.

	*/
	To *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get instrument price range params
func (o *GetInstrumentPriceRangeParams) WithTimeout(timeout time.Duration) *GetInstrumentPriceRangeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get instrument price range params
func (o *GetInstrumentPriceRangeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get instrument price range params
func (o *GetInstrumentPriceRangeParams) WithContext(ctx context.Context) *GetInstrumentPriceRangeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get instrument price range params
func (o *GetInstrumentPriceRangeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get instrument price range params
func (o *GetInstrumentPriceRangeParams) WithHTTPClient(client *http.Client) *GetInstrumentPriceRangeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get instrument price range params
func (o *GetInstrumentPriceRangeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAcceptDatetimeFormat adds the acceptDatetimeFormat to the get instrument price range params
func (o *GetInstrumentPriceRangeParams) WithAcceptDatetimeFormat(acceptDatetimeFormat *string) *GetInstrumentPriceRangeParams {
	o.SetAcceptDatetimeFormat(acceptDatetimeFormat)
	return o
}

// SetAcceptDatetimeFormat adds the acceptDatetimeFormat to the get instrument price range params
func (o *GetInstrumentPriceRangeParams) SetAcceptDatetimeFormat(acceptDatetimeFormat *string) {
	o.AcceptDatetimeFormat = acceptDatetimeFormat
}

// WithAuthorization adds the authorization to the get instrument price range params
func (o *GetInstrumentPriceRangeParams) WithAuthorization(authorization string) *GetInstrumentPriceRangeParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the get instrument price range params
func (o *GetInstrumentPriceRangeParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithFrom adds the from to the get instrument price range params
func (o *GetInstrumentPriceRangeParams) WithFrom(from string) *GetInstrumentPriceRangeParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the get instrument price range params
func (o *GetInstrumentPriceRangeParams) SetFrom(from string) {
	o.From = from
}

// WithInstrument adds the instrument to the get instrument price range params
func (o *GetInstrumentPriceRangeParams) WithInstrument(instrument string) *GetInstrumentPriceRangeParams {
	o.SetInstrument(instrument)
	return o
}

// SetInstrument adds the instrument to the get instrument price range params
func (o *GetInstrumentPriceRangeParams) SetInstrument(instrument string) {
	o.Instrument = instrument
}

// WithTo adds the to to the get instrument price range params
func (o *GetInstrumentPriceRangeParams) WithTo(to *string) *GetInstrumentPriceRangeParams {
	o.SetTo(to)
	return o
}

// SetTo adds the to to the get instrument price range params
func (o *GetInstrumentPriceRangeParams) SetTo(to *string) {
	o.To = to
}

// WriteToRequest writes these params to a swagger request
func (o *GetInstrumentPriceRangeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AcceptDatetimeFormat != nil {

		// header param Accept-Datetime-Format
		if err := r.SetHeaderParam("Accept-Datetime-Format", *o.AcceptDatetimeFormat); err != nil {
			return err
		}

	}

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	// query param from
	qrFrom := o.From
	qFrom := qrFrom
	if qFrom != "" {
		if err := r.SetQueryParam("from", qFrom); err != nil {
			return err
		}
	}

	// path param instrument
	if err := r.SetPathParam("instrument", o.Instrument); err != nil {
		return err
	}

	if o.To != nil {

		// query param to
		var qrTo string
		if o.To != nil {
			qrTo = *o.To
		}
		qTo := qrTo
		if qTo != "" {
			if err := r.SetQueryParam("to", qTo); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
