// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/SuperGod/oanda/models"
)

// CloseTradeReader is a Reader for the CloseTrade structure.
type CloseTradeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CloseTradeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewCloseTradeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewCloseTradeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewCloseTradeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewCloseTradeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewCloseTradeMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCloseTradeOK creates a CloseTradeOK with default headers values
func NewCloseTradeOK() *CloseTradeOK {
	return &CloseTradeOK{}
}

/*CloseTradeOK handles this case with default header values.

The Trade has been closed as requested
*/
type CloseTradeOK struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *CloseTradeOKBody
}

func (o *CloseTradeOK) Error() string {
	return fmt.Sprintf("[PUT /accounts/{accountID}/trades/{tradeSpecifier}/close][%d] closeTradeOK  %+v", 200, o.Payload)
}

func (o *CloseTradeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(CloseTradeOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCloseTradeBadRequest creates a CloseTradeBadRequest with default headers values
func NewCloseTradeBadRequest() *CloseTradeBadRequest {
	return &CloseTradeBadRequest{}
}

/*CloseTradeBadRequest handles this case with default header values.

The Trade cannot be closed as requested.
*/
type CloseTradeBadRequest struct {
	Payload *CloseTradeBadRequestBody
}

func (o *CloseTradeBadRequest) Error() string {
	return fmt.Sprintf("[PUT /accounts/{accountID}/trades/{tradeSpecifier}/close][%d] closeTradeBadRequest  %+v", 400, o.Payload)
}

func (o *CloseTradeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CloseTradeBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCloseTradeUnauthorized creates a CloseTradeUnauthorized with default headers values
func NewCloseTradeUnauthorized() *CloseTradeUnauthorized {
	return &CloseTradeUnauthorized{}
}

/*CloseTradeUnauthorized handles this case with default header values.

Unauthorized. The endpoint being access required the client to authenticated, however the the authentication token is invalid or has not been provided.
*/
type CloseTradeUnauthorized struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *CloseTradeUnauthorizedBody
}

func (o *CloseTradeUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /accounts/{accountID}/trades/{tradeSpecifier}/close][%d] closeTradeUnauthorized  %+v", 401, o.Payload)
}

func (o *CloseTradeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(CloseTradeUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCloseTradeNotFound creates a CloseTradeNotFound with default headers values
func NewCloseTradeNotFound() *CloseTradeNotFound {
	return &CloseTradeNotFound{}
}

/*CloseTradeNotFound handles this case with default header values.

The Account or Trade specified does not exist.
*/
type CloseTradeNotFound struct {
	Payload *CloseTradeNotFoundBody
}

func (o *CloseTradeNotFound) Error() string {
	return fmt.Sprintf("[PUT /accounts/{accountID}/trades/{tradeSpecifier}/close][%d] closeTradeNotFound  %+v", 404, o.Payload)
}

func (o *CloseTradeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CloseTradeNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCloseTradeMethodNotAllowed creates a CloseTradeMethodNotAllowed with default headers values
func NewCloseTradeMethodNotAllowed() *CloseTradeMethodNotAllowed {
	return &CloseTradeMethodNotAllowed{}
}

/*CloseTradeMethodNotAllowed handles this case with default header values.

Method Not Allowed. The client has attempted to access an endpoint using an HTTP method that is not supported.
*/
type CloseTradeMethodNotAllowed struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *CloseTradeMethodNotAllowedBody
}

func (o *CloseTradeMethodNotAllowed) Error() string {
	return fmt.Sprintf("[PUT /accounts/{accountID}/trades/{tradeSpecifier}/close][%d] closeTradeMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *CloseTradeMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(CloseTradeMethodNotAllowedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*CloseTradeBadRequestBody close trade bad request body
swagger:model CloseTradeBadRequestBody
*/
type CloseTradeBadRequestBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`

	// order reject transaction
	OrderRejectTransaction *models.MarketOrderRejectTransaction `json:"orderRejectTransaction,omitempty"`
}

// Validate validates this close trade bad request body
func (o *CloseTradeBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateOrderRejectTransaction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CloseTradeBadRequestBody) validateOrderRejectTransaction(formats strfmt.Registry) error {

	if swag.IsZero(o.OrderRejectTransaction) { // not required
		return nil
	}

	if o.OrderRejectTransaction != nil {
		if err := o.OrderRejectTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("closeTradeBadRequest" + "." + "orderRejectTransaction")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CloseTradeBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CloseTradeBadRequestBody) UnmarshalBinary(b []byte) error {
	var res CloseTradeBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CloseTradeBody close trade body
swagger:model CloseTradeBody
*/
type CloseTradeBody struct {

	// Indication of how much of the Trade to close. Either the string "ALL" (indicating that all of the Trade should be closed), or a DecimalNumber representing the number of units of the open Trade to Close using a TradeClose MarketOrder. The units specified must always be positive, and the magnitude of the value cannot exceed the magnitude of the Trade's open units.
	Units string `json:"units,omitempty"`
}

// Validate validates this close trade body
func (o *CloseTradeBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CloseTradeBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CloseTradeBody) UnmarshalBinary(b []byte) error {
	var res CloseTradeBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CloseTradeMethodNotAllowedBody close trade method not allowed body
swagger:model CloseTradeMethodNotAllowedBody
*/
type CloseTradeMethodNotAllowedBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`
}

// Validate validates this close trade method not allowed body
func (o *CloseTradeMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CloseTradeMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CloseTradeMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res CloseTradeMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CloseTradeNotFoundBody close trade not found body
swagger:model CloseTradeNotFoundBody
*/
type CloseTradeNotFoundBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`

	// The ID of the most recent Transaction created for the Account. Only present if the Account exists.
	LastTransactionID string `json:"lastTransactionID,omitempty"`

	// order reject transaction
	OrderRejectTransaction *models.MarketOrderRejectTransaction `json:"orderRejectTransaction,omitempty"`

	// The IDs of all Transactions that were created while satisfying the request. Only present if the Account exists.
	RelatedTransactionIds []string `json:"relatedTransactionIDs"`
}

// Validate validates this close trade not found body
func (o *CloseTradeNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateOrderRejectTransaction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CloseTradeNotFoundBody) validateOrderRejectTransaction(formats strfmt.Registry) error {

	if swag.IsZero(o.OrderRejectTransaction) { // not required
		return nil
	}

	if o.OrderRejectTransaction != nil {
		if err := o.OrderRejectTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("closeTradeNotFound" + "." + "orderRejectTransaction")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CloseTradeNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CloseTradeNotFoundBody) UnmarshalBinary(b []byte) error {
	var res CloseTradeNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CloseTradeOKBody close trade o k body
swagger:model CloseTradeOKBody
*/
type CloseTradeOKBody struct {

	// The ID of the most recent Transaction created for the Account
	LastTransactionID string `json:"lastTransactionID,omitempty"`

	// order cancel transaction
	OrderCancelTransaction *models.OrderCancelTransaction `json:"orderCancelTransaction,omitempty"`

	// order create transaction
	OrderCreateTransaction *models.MarketOrderTransaction `json:"orderCreateTransaction,omitempty"`

	// order fill transaction
	OrderFillTransaction *models.OrderFillTransaction `json:"orderFillTransaction,omitempty"`

	// The IDs of all Transactions that were created while satisfying the request.
	RelatedTransactionIds []string `json:"relatedTransactionIDs"`
}

// Validate validates this close trade o k body
func (o *CloseTradeOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateOrderCancelTransaction(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOrderCreateTransaction(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOrderFillTransaction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CloseTradeOKBody) validateOrderCancelTransaction(formats strfmt.Registry) error {

	if swag.IsZero(o.OrderCancelTransaction) { // not required
		return nil
	}

	if o.OrderCancelTransaction != nil {
		if err := o.OrderCancelTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("closeTradeOK" + "." + "orderCancelTransaction")
			}
			return err
		}
	}

	return nil
}

func (o *CloseTradeOKBody) validateOrderCreateTransaction(formats strfmt.Registry) error {

	if swag.IsZero(o.OrderCreateTransaction) { // not required
		return nil
	}

	if o.OrderCreateTransaction != nil {
		if err := o.OrderCreateTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("closeTradeOK" + "." + "orderCreateTransaction")
			}
			return err
		}
	}

	return nil
}

func (o *CloseTradeOKBody) validateOrderFillTransaction(formats strfmt.Registry) error {

	if swag.IsZero(o.OrderFillTransaction) { // not required
		return nil
	}

	if o.OrderFillTransaction != nil {
		if err := o.OrderFillTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("closeTradeOK" + "." + "orderFillTransaction")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CloseTradeOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CloseTradeOKBody) UnmarshalBinary(b []byte) error {
	var res CloseTradeOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CloseTradeUnauthorizedBody close trade unauthorized body
swagger:model CloseTradeUnauthorizedBody
*/
type CloseTradeUnauthorizedBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`
}

// Validate validates this close trade unauthorized body
func (o *CloseTradeUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CloseTradeUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CloseTradeUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res CloseTradeUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
