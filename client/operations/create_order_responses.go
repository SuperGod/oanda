// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/SuperGod/oanda/models"
)

// CreateOrderReader is a Reader for the CreateOrder structure.
type CreateOrderReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateOrderReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewCreateOrderCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewCreateOrderBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewCreateOrderUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewCreateOrderForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewCreateOrderNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewCreateOrderMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCreateOrderCreated creates a CreateOrderCreated with default headers values
func NewCreateOrderCreated() *CreateOrderCreated {
	return &CreateOrderCreated{}
}

/*CreateOrderCreated handles this case with default header values.

The Order was created as specified
*/
type CreateOrderCreated struct {
	/*A link to the Order that was just created
	 */
	Location string
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *CreateOrderCreatedBody
}

func (o *CreateOrderCreated) Error() string {
	return fmt.Sprintf("[POST /accounts/{accountID}/orders][%d] createOrderCreated  %+v", 201, o.Payload)
}

func (o *CreateOrderCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Location
	o.Location = response.GetHeader("Location")

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(CreateOrderCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateOrderBadRequest creates a CreateOrderBadRequest with default headers values
func NewCreateOrderBadRequest() *CreateOrderBadRequest {
	return &CreateOrderBadRequest{}
}

/*CreateOrderBadRequest handles this case with default header values.

The Order specification was invalid
*/
type CreateOrderBadRequest struct {
	Payload *CreateOrderBadRequestBody
}

func (o *CreateOrderBadRequest) Error() string {
	return fmt.Sprintf("[POST /accounts/{accountID}/orders][%d] createOrderBadRequest  %+v", 400, o.Payload)
}

func (o *CreateOrderBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateOrderBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateOrderUnauthorized creates a CreateOrderUnauthorized with default headers values
func NewCreateOrderUnauthorized() *CreateOrderUnauthorized {
	return &CreateOrderUnauthorized{}
}

/*CreateOrderUnauthorized handles this case with default header values.

Unauthorized. The endpoint being access required the client to authenticated, however the the authentication token is invalid or has not been provided.
*/
type CreateOrderUnauthorized struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *CreateOrderUnauthorizedBody
}

func (o *CreateOrderUnauthorized) Error() string {
	return fmt.Sprintf("[POST /accounts/{accountID}/orders][%d] createOrderUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateOrderUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(CreateOrderUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateOrderForbidden creates a CreateOrderForbidden with default headers values
func NewCreateOrderForbidden() *CreateOrderForbidden {
	return &CreateOrderForbidden{}
}

/*CreateOrderForbidden handles this case with default header values.

Forbidden. The client has provided a token that does not authorize them to perform the action implemented by the API endpoint.
*/
type CreateOrderForbidden struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *CreateOrderForbiddenBody
}

func (o *CreateOrderForbidden) Error() string {
	return fmt.Sprintf("[POST /accounts/{accountID}/orders][%d] createOrderForbidden  %+v", 403, o.Payload)
}

func (o *CreateOrderForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(CreateOrderForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateOrderNotFound creates a CreateOrderNotFound with default headers values
func NewCreateOrderNotFound() *CreateOrderNotFound {
	return &CreateOrderNotFound{}
}

/*CreateOrderNotFound handles this case with default header values.

The Order or Account specified does not exist.
*/
type CreateOrderNotFound struct {
	Payload *CreateOrderNotFoundBody
}

func (o *CreateOrderNotFound) Error() string {
	return fmt.Sprintf("[POST /accounts/{accountID}/orders][%d] createOrderNotFound  %+v", 404, o.Payload)
}

func (o *CreateOrderNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateOrderNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateOrderMethodNotAllowed creates a CreateOrderMethodNotAllowed with default headers values
func NewCreateOrderMethodNotAllowed() *CreateOrderMethodNotAllowed {
	return &CreateOrderMethodNotAllowed{}
}

/*CreateOrderMethodNotAllowed handles this case with default header values.

Method Not Allowed. The client has attempted to access an endpoint using an HTTP method that is not supported.
*/
type CreateOrderMethodNotAllowed struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *CreateOrderMethodNotAllowedBody
}

func (o *CreateOrderMethodNotAllowed) Error() string {
	return fmt.Sprintf("[POST /accounts/{accountID}/orders][%d] createOrderMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *CreateOrderMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(CreateOrderMethodNotAllowedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*CreateOrderBadRequestBody create order bad request body
swagger:model CreateOrderBadRequestBody
*/
type CreateOrderBadRequestBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`

	// The ID of the most recent Transaction created for the Account
	LastTransactionID string `json:"lastTransactionID,omitempty"`

	// order reject transaction
	OrderRejectTransaction *models.Transaction `json:"orderRejectTransaction,omitempty"`

	// The IDs of all Transactions that were created while satisfying the request.
	RelatedTransactionIds []string `json:"relatedTransactionIDs"`
}

// Validate validates this create order bad request body
func (o *CreateOrderBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateOrderRejectTransaction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateOrderBadRequestBody) validateOrderRejectTransaction(formats strfmt.Registry) error {

	if swag.IsZero(o.OrderRejectTransaction) { // not required
		return nil
	}

	if o.OrderRejectTransaction != nil {
		if err := o.OrderRejectTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrderBadRequest" + "." + "orderRejectTransaction")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrderBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrderBadRequestBody) UnmarshalBinary(b []byte) error {
	var res CreateOrderBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateOrderBody create order body
swagger:model CreateOrderBody
*/
type CreateOrderBody struct {

	// order
	Order models.OrderRequest `json:"order,omitempty"`
}

// Validate validates this create order body
func (o *CreateOrderBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrderBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrderBody) UnmarshalBinary(b []byte) error {
	var res CreateOrderBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateOrderCreatedBody create order created body
swagger:model CreateOrderCreatedBody
*/
type CreateOrderCreatedBody struct {

	// The ID of the most recent Transaction created for the Account
	LastTransactionID string `json:"lastTransactionID,omitempty"`

	// order cancel transaction
	OrderCancelTransaction *models.OrderCancelTransaction `json:"orderCancelTransaction,omitempty"`

	// order create transaction
	OrderCreateTransaction *models.Transaction `json:"orderCreateTransaction,omitempty"`

	// order fill transaction
	OrderFillTransaction *models.OrderFillTransaction `json:"orderFillTransaction,omitempty"`

	// order reissue reject transaction
	OrderReissueRejectTransaction *models.Transaction `json:"orderReissueRejectTransaction,omitempty"`

	// order reissue transaction
	OrderReissueTransaction *models.Transaction `json:"orderReissueTransaction,omitempty"`

	// The IDs of all Transactions that were created while satisfying the request.
	RelatedTransactionIds []string `json:"relatedTransactionIDs"`
}

// Validate validates this create order created body
func (o *CreateOrderCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateOrderCancelTransaction(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOrderCreateTransaction(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOrderFillTransaction(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOrderReissueRejectTransaction(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOrderReissueTransaction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateOrderCreatedBody) validateOrderCancelTransaction(formats strfmt.Registry) error {

	if swag.IsZero(o.OrderCancelTransaction) { // not required
		return nil
	}

	if o.OrderCancelTransaction != nil {
		if err := o.OrderCancelTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrderCreated" + "." + "orderCancelTransaction")
			}
			return err
		}
	}

	return nil
}

func (o *CreateOrderCreatedBody) validateOrderCreateTransaction(formats strfmt.Registry) error {

	if swag.IsZero(o.OrderCreateTransaction) { // not required
		return nil
	}

	if o.OrderCreateTransaction != nil {
		if err := o.OrderCreateTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrderCreated" + "." + "orderCreateTransaction")
			}
			return err
		}
	}

	return nil
}

func (o *CreateOrderCreatedBody) validateOrderFillTransaction(formats strfmt.Registry) error {

	if swag.IsZero(o.OrderFillTransaction) { // not required
		return nil
	}

	if o.OrderFillTransaction != nil {
		if err := o.OrderFillTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrderCreated" + "." + "orderFillTransaction")
			}
			return err
		}
	}

	return nil
}

func (o *CreateOrderCreatedBody) validateOrderReissueRejectTransaction(formats strfmt.Registry) error {

	if swag.IsZero(o.OrderReissueRejectTransaction) { // not required
		return nil
	}

	if o.OrderReissueRejectTransaction != nil {
		if err := o.OrderReissueRejectTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrderCreated" + "." + "orderReissueRejectTransaction")
			}
			return err
		}
	}

	return nil
}

func (o *CreateOrderCreatedBody) validateOrderReissueTransaction(formats strfmt.Registry) error {

	if swag.IsZero(o.OrderReissueTransaction) { // not required
		return nil
	}

	if o.OrderReissueTransaction != nil {
		if err := o.OrderReissueTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrderCreated" + "." + "orderReissueTransaction")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrderCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrderCreatedBody) UnmarshalBinary(b []byte) error {
	var res CreateOrderCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateOrderForbiddenBody create order forbidden body
swagger:model CreateOrderForbiddenBody
*/
type CreateOrderForbiddenBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`
}

// Validate validates this create order forbidden body
func (o *CreateOrderForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrderForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrderForbiddenBody) UnmarshalBinary(b []byte) error {
	var res CreateOrderForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateOrderMethodNotAllowedBody create order method not allowed body
swagger:model CreateOrderMethodNotAllowedBody
*/
type CreateOrderMethodNotAllowedBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`
}

// Validate validates this create order method not allowed body
func (o *CreateOrderMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrderMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrderMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res CreateOrderMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateOrderNotFoundBody create order not found body
swagger:model CreateOrderNotFoundBody
*/
type CreateOrderNotFoundBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`

	// The ID of the most recent Transaction created for the Account. Only present if the Account exists.
	LastTransactionID string `json:"lastTransactionID,omitempty"`

	// order reject transaction
	OrderRejectTransaction *models.Transaction `json:"orderRejectTransaction,omitempty"`

	// The IDs of all Transactions that were created while satisfying the request. Only present if the Account exists.
	RelatedTransactionIds []string `json:"relatedTransactionIDs"`
}

// Validate validates this create order not found body
func (o *CreateOrderNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateOrderRejectTransaction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateOrderNotFoundBody) validateOrderRejectTransaction(formats strfmt.Registry) error {

	if swag.IsZero(o.OrderRejectTransaction) { // not required
		return nil
	}

	if o.OrderRejectTransaction != nil {
		if err := o.OrderRejectTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrderNotFound" + "." + "orderRejectTransaction")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrderNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrderNotFoundBody) UnmarshalBinary(b []byte) error {
	var res CreateOrderNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateOrderUnauthorizedBody create order unauthorized body
swagger:model CreateOrderUnauthorizedBody
*/
type CreateOrderUnauthorizedBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`
}

// Validate validates this create order unauthorized body
func (o *CreateOrderUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrderUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrderUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res CreateOrderUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
