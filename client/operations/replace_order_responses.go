// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/SuperGod/oanda/models"
)

// ReplaceOrderReader is a Reader for the ReplaceOrder structure.
type ReplaceOrderReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReplaceOrderReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewReplaceOrderCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewReplaceOrderBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewReplaceOrderUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewReplaceOrderNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewReplaceOrderMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewReplaceOrderCreated creates a ReplaceOrderCreated with default headers values
func NewReplaceOrderCreated() *ReplaceOrderCreated {
	return &ReplaceOrderCreated{}
}

/*ReplaceOrderCreated handles this case with default header values.

The Order was successfully cancelled and replaced
*/
type ReplaceOrderCreated struct {
	/*A link to the replacing Order
	 */
	Location string
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *ReplaceOrderCreatedBody
}

func (o *ReplaceOrderCreated) Error() string {
	return fmt.Sprintf("[PUT /accounts/{accountID}/orders/{orderSpecifier}][%d] replaceOrderCreated  %+v", 201, o.Payload)
}

func (o *ReplaceOrderCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Location
	o.Location = response.GetHeader("Location")

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(ReplaceOrderCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceOrderBadRequest creates a ReplaceOrderBadRequest with default headers values
func NewReplaceOrderBadRequest() *ReplaceOrderBadRequest {
	return &ReplaceOrderBadRequest{}
}

/*ReplaceOrderBadRequest handles this case with default header values.

The Order specification was invalid
*/
type ReplaceOrderBadRequest struct {
	Payload *ReplaceOrderBadRequestBody
}

func (o *ReplaceOrderBadRequest) Error() string {
	return fmt.Sprintf("[PUT /accounts/{accountID}/orders/{orderSpecifier}][%d] replaceOrderBadRequest  %+v", 400, o.Payload)
}

func (o *ReplaceOrderBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ReplaceOrderBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceOrderUnauthorized creates a ReplaceOrderUnauthorized with default headers values
func NewReplaceOrderUnauthorized() *ReplaceOrderUnauthorized {
	return &ReplaceOrderUnauthorized{}
}

/*ReplaceOrderUnauthorized handles this case with default header values.

Unauthorized. The endpoint being access required the client to authenticated, however the the authentication token is invalid or has not been provided.
*/
type ReplaceOrderUnauthorized struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *ReplaceOrderUnauthorizedBody
}

func (o *ReplaceOrderUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /accounts/{accountID}/orders/{orderSpecifier}][%d] replaceOrderUnauthorized  %+v", 401, o.Payload)
}

func (o *ReplaceOrderUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(ReplaceOrderUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceOrderNotFound creates a ReplaceOrderNotFound with default headers values
func NewReplaceOrderNotFound() *ReplaceOrderNotFound {
	return &ReplaceOrderNotFound{}
}

/*ReplaceOrderNotFound handles this case with default header values.

The Account or Order specified does not exist.
*/
type ReplaceOrderNotFound struct {
	Payload *ReplaceOrderNotFoundBody
}

func (o *ReplaceOrderNotFound) Error() string {
	return fmt.Sprintf("[PUT /accounts/{accountID}/orders/{orderSpecifier}][%d] replaceOrderNotFound  %+v", 404, o.Payload)
}

func (o *ReplaceOrderNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ReplaceOrderNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceOrderMethodNotAllowed creates a ReplaceOrderMethodNotAllowed with default headers values
func NewReplaceOrderMethodNotAllowed() *ReplaceOrderMethodNotAllowed {
	return &ReplaceOrderMethodNotAllowed{}
}

/*ReplaceOrderMethodNotAllowed handles this case with default header values.

Method Not Allowed. The client has attempted to access an endpoint using an HTTP method that is not supported.
*/
type ReplaceOrderMethodNotAllowed struct {
	/*The unique identifier generated for the request
	 */
	RequestID string

	Payload *ReplaceOrderMethodNotAllowedBody
}

func (o *ReplaceOrderMethodNotAllowed) Error() string {
	return fmt.Sprintf("[PUT /accounts/{accountID}/orders/{orderSpecifier}][%d] replaceOrderMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *ReplaceOrderMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header RequestID
	o.RequestID = response.GetHeader("RequestID")

	o.Payload = new(ReplaceOrderMethodNotAllowedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ReplaceOrderBadRequestBody replace order bad request body
swagger:model ReplaceOrderBadRequestBody
*/
type ReplaceOrderBadRequestBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`

	// The ID of the most recent Transaction created for the Account.
	LastTransactionID string `json:"lastTransactionID,omitempty"`

	// order reject transaction
	OrderRejectTransaction *models.Transaction `json:"orderRejectTransaction,omitempty"`

	// The IDs of all Transactions that were created while satisfying the request.
	RelatedTransactionIds []string `json:"relatedTransactionIDs"`
}

// Validate validates this replace order bad request body
func (o *ReplaceOrderBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateOrderRejectTransaction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ReplaceOrderBadRequestBody) validateOrderRejectTransaction(formats strfmt.Registry) error {

	if swag.IsZero(o.OrderRejectTransaction) { // not required
		return nil
	}

	if o.OrderRejectTransaction != nil {
		if err := o.OrderRejectTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replaceOrderBadRequest" + "." + "orderRejectTransaction")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ReplaceOrderBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ReplaceOrderBadRequestBody) UnmarshalBinary(b []byte) error {
	var res ReplaceOrderBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ReplaceOrderBody replace order body
swagger:model ReplaceOrderBody
*/
type ReplaceOrderBody struct {

	// order
	Order models.OrderRequest `json:"order,omitempty"`
}

// Validate validates this replace order body
func (o *ReplaceOrderBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ReplaceOrderBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ReplaceOrderBody) UnmarshalBinary(b []byte) error {
	var res ReplaceOrderBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ReplaceOrderCreatedBody replace order created body
swagger:model ReplaceOrderCreatedBody
*/
type ReplaceOrderCreatedBody struct {

	// The ID of the most recent Transaction created for the Account
	LastTransactionID string `json:"lastTransactionID,omitempty"`

	// order cancel transaction
	OrderCancelTransaction *models.OrderCancelTransaction `json:"orderCancelTransaction,omitempty"`

	// order create transaction
	OrderCreateTransaction *models.Transaction `json:"orderCreateTransaction,omitempty"`

	// order fill transaction
	OrderFillTransaction *models.OrderFillTransaction `json:"orderFillTransaction,omitempty"`

	// order reissue reject transaction
	OrderReissueRejectTransaction *models.Transaction `json:"orderReissueRejectTransaction,omitempty"`

	// order reissue transaction
	OrderReissueTransaction *models.Transaction `json:"orderReissueTransaction,omitempty"`

	// The IDs of all Transactions that were created while satisfying the request.
	RelatedTransactionIds []string `json:"relatedTransactionIDs"`

	// replacing order cancel transaction
	ReplacingOrderCancelTransaction *models.OrderCancelTransaction `json:"replacingOrderCancelTransaction,omitempty"`
}

// Validate validates this replace order created body
func (o *ReplaceOrderCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateOrderCancelTransaction(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOrderCreateTransaction(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOrderFillTransaction(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOrderReissueRejectTransaction(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOrderReissueTransaction(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReplacingOrderCancelTransaction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ReplaceOrderCreatedBody) validateOrderCancelTransaction(formats strfmt.Registry) error {

	if swag.IsZero(o.OrderCancelTransaction) { // not required
		return nil
	}

	if o.OrderCancelTransaction != nil {
		if err := o.OrderCancelTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replaceOrderCreated" + "." + "orderCancelTransaction")
			}
			return err
		}
	}

	return nil
}

func (o *ReplaceOrderCreatedBody) validateOrderCreateTransaction(formats strfmt.Registry) error {

	if swag.IsZero(o.OrderCreateTransaction) { // not required
		return nil
	}

	if o.OrderCreateTransaction != nil {
		if err := o.OrderCreateTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replaceOrderCreated" + "." + "orderCreateTransaction")
			}
			return err
		}
	}

	return nil
}

func (o *ReplaceOrderCreatedBody) validateOrderFillTransaction(formats strfmt.Registry) error {

	if swag.IsZero(o.OrderFillTransaction) { // not required
		return nil
	}

	if o.OrderFillTransaction != nil {
		if err := o.OrderFillTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replaceOrderCreated" + "." + "orderFillTransaction")
			}
			return err
		}
	}

	return nil
}

func (o *ReplaceOrderCreatedBody) validateOrderReissueRejectTransaction(formats strfmt.Registry) error {

	if swag.IsZero(o.OrderReissueRejectTransaction) { // not required
		return nil
	}

	if o.OrderReissueRejectTransaction != nil {
		if err := o.OrderReissueRejectTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replaceOrderCreated" + "." + "orderReissueRejectTransaction")
			}
			return err
		}
	}

	return nil
}

func (o *ReplaceOrderCreatedBody) validateOrderReissueTransaction(formats strfmt.Registry) error {

	if swag.IsZero(o.OrderReissueTransaction) { // not required
		return nil
	}

	if o.OrderReissueTransaction != nil {
		if err := o.OrderReissueTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replaceOrderCreated" + "." + "orderReissueTransaction")
			}
			return err
		}
	}

	return nil
}

func (o *ReplaceOrderCreatedBody) validateReplacingOrderCancelTransaction(formats strfmt.Registry) error {

	if swag.IsZero(o.ReplacingOrderCancelTransaction) { // not required
		return nil
	}

	if o.ReplacingOrderCancelTransaction != nil {
		if err := o.ReplacingOrderCancelTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replaceOrderCreated" + "." + "replacingOrderCancelTransaction")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ReplaceOrderCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ReplaceOrderCreatedBody) UnmarshalBinary(b []byte) error {
	var res ReplaceOrderCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ReplaceOrderMethodNotAllowedBody replace order method not allowed body
swagger:model ReplaceOrderMethodNotAllowedBody
*/
type ReplaceOrderMethodNotAllowedBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`
}

// Validate validates this replace order method not allowed body
func (o *ReplaceOrderMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ReplaceOrderMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ReplaceOrderMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res ReplaceOrderMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ReplaceOrderNotFoundBody replace order not found body
swagger:model ReplaceOrderNotFoundBody
*/
type ReplaceOrderNotFoundBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`

	// The ID of the most recent Transaction created for the Account. Only present if the Account exists.
	LastTransactionID string `json:"lastTransactionID,omitempty"`

	// order cancel reject transaction
	OrderCancelRejectTransaction *models.Transaction `json:"orderCancelRejectTransaction,omitempty"`

	// The IDs of all Transactions that were created while satisfying the request. Only present if the Account exists.
	RelatedTransactionIds []string `json:"relatedTransactionIDs"`
}

// Validate validates this replace order not found body
func (o *ReplaceOrderNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateOrderCancelRejectTransaction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ReplaceOrderNotFoundBody) validateOrderCancelRejectTransaction(formats strfmt.Registry) error {

	if swag.IsZero(o.OrderCancelRejectTransaction) { // not required
		return nil
	}

	if o.OrderCancelRejectTransaction != nil {
		if err := o.OrderCancelRejectTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replaceOrderNotFound" + "." + "orderCancelRejectTransaction")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ReplaceOrderNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ReplaceOrderNotFoundBody) UnmarshalBinary(b []byte) error {
	var res ReplaceOrderNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ReplaceOrderUnauthorizedBody replace order unauthorized body
swagger:model ReplaceOrderUnauthorizedBody
*/
type ReplaceOrderUnauthorizedBody struct {

	// The code of the error that has occurred. This field may not be returned for some errors.
	ErrorCode string `json:"errorCode,omitempty"`

	// The human-readable description of the error that has occurred.
	ErrorMessage string `json:"errorMessage,omitempty"`
}

// Validate validates this replace order unauthorized body
func (o *ReplaceOrderUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ReplaceOrderUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ReplaceOrderUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res ReplaceOrderUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
