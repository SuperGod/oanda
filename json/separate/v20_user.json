{
  "swagger": "2.0",
  "info": {
    "title": "OANDA v20 User PI",
    "description": "Definitions and endpoints related to v20 Users.",
    "contact": {
      "name": "OANDA API Support",
      "url": "http://developer.oanda.com/rest-live-v20/introduction/",
      "email": "api@oanda.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://github.com/oanda/v20-openapi/blob/master/LICENSE.txt"
    },
    "version": "3.0.25"
  },
  "basePath": "/v3",
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "paths": {
    "/users/{userSpecifier}": {
      "get": {
        "summary": "User Info",
        "description": "Fetch the user information for the specified user. This endpoint is intended to be used by the user themself to obtain their own information.",
        "operationId": "getInfo",
        "parameters": [
          {
            "$ref": "v20_primitives.json#/parameters/authorizationHeaderParam"
          },
          {
            "$ref": "#/parameters/userSpecifierPathParam"
          }
        ],
        "responses": {
          "200": {
            "description": "The user information has been provided",
            "headers": {
              "RequestID": {
                "description": "The unique identifier generated for the request",
                "type": "string"
              }
            },
            "schema": {
              "type": "object",
              "properties": {
                "userInfo": {
                  "$ref": "#/definitions/UserInfo"
                }
              }
            }
          },
          "401": {
            "$ref": "v20_primitives.json#/responses/401"
          },
          "403": {
            "$ref": "v20_primitives.json#/responses/403"
          },
          "405": {
            "$ref": "v20_primitives.json#/responses/405"
          }
        }
      }
    },
    "/users/{userSpecifier}/externalInfo": {
      "get": {
        "summary": "External User Info",
        "description": "Fetch the externally-available user information for the specified user. This endpoint is intended to be used by 3rd parties that have been authorized by a user to view their personal information.",
        "operationId": "getExternalInfo",
        "parameters": [
          {
            "$ref": "v20_primitives.json#/parameters/authorizationHeaderParam"
          },
          {
            "$ref": "#/parameters/userSpecifierPathParam"
          }
        ],
        "responses": {
          "200": {
            "description": "The external user information has been provided",
            "headers": {
              "RequestID": {
                "description": "The unique identifier generated for the request",
                "type": "string"
              }
            },
            "schema": {
              "type": "object",
              "properties": {
                "userInfo": {
                  "$ref": "#/definitions/UserInfoExternal"
                }
              }
            }
          },
          "401": {
            "$ref": "v20_primitives.json#/responses/401"
          },
          "403": {
            "$ref": "v20_primitives.json#/responses/403"
          },
          "405": {
            "$ref": "v20_primitives.json#/responses/405"
          }
        }
      }
    }
  },
  "definitions": {
    "UserSpecifier": {
      "type": "string",
      "description": "The specifier that refers to a User",
      "format": "A user specifier may have one of 3 formats: the OANDA-assigned User ID (numerical), the client-provided username prefixed by the \"@\" symbol (e.g. \"@myusername\"), or the \"@\" symbol. The \"@\" symbol on its own acts as an alias for the username of the user accessing the endpoint (as inferred from the token provided)."
    },
    "UserInfo": {
      "type": "object",
      "description": "A representation of user information, as provided to the user themself.",
      "properties": {
        "username": {
          "type": "string",
          "description": "The user-provided username."
        },
        "userID": {
          "type": "integer",
          "description": "The user's OANDA-assigned user ID."
        },
        "country": {
          "type": "string",
          "description": "The country that the user is based in."
        },
        "emailAddress": {
          "type": "string",
          "description": "The user's email address."
        }
      }
    },
    "UserInfoExternal": {
      "type": "object",
      "description": "A representation of user information, as available to external (3rd party) clients.",
      "properties": {
        "userID": {
          "type": "integer",
          "description": "The user's OANDA-assigned user ID."
        },
        "country": {
          "type": "string",
          "description": "The country that the user is based in."
        },
        "FIFO": {
          "type": "boolean",
          "description": "Flag indicating if the the user's Accounts adhere to FIFO execution rules."
        }
      }
    }
  },
  "parameters": {
    "userSpecifierPathParam": {
      "name": "userSpecifier",
      "description": "The User Specifier",
      "in": "path",
      "type": "string",
      "format": "A user specifier may have one of 3 formats: the OANDA-assigned User ID (numerical), the client-provided username prefixed by the \"@\" symbol (e.g. \"@myusername\"), or the \"@\" symbol. The \"@\" symbol on its own acts as an alias for the username of the user accessing the endpoint (as inferred from the token provided).",
      "required": true
    }
  },
  "responses": {
    "400": {
      "description": "Bad Request. The client has provided invalid data to be processed by the server.",
      "headers": {
        "RequestID": {
          "description": "The unique identifier generated for the request",
          "type": "string"
        }
      },
      "schema": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string",
            "description": "The code of the error that has occurred. This field may not be returned for some errors."
          },
          "errorMessage": {
            "type": "string",
            "description": "The human-readable description of the error that has occurred."
          }
        }
      }
    },
    "401": {
      "description": "Unauthorized. The endpoint being access required the client to authenticated, however the the authentication token is invalid or has not been provided.",
      "headers": {
        "RequestID": {
          "description": "The unique identifier generated for the request",
          "type": "string"
        }
      },
      "schema": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string",
            "description": "The code of the error that has occurred. This field may not be returned for some errors."
          },
          "errorMessage": {
            "type": "string",
            "description": "The human-readable description of the error that has occurred."
          }
        }
      }
    },
    "403": {
      "description": "Forbidden. The client has provided a token that does not authorize them to perform the action implemented by the API endpoint.",
      "headers": {
        "RequestID": {
          "description": "The unique identifier generated for the request",
          "type": "string"
        }
      },
      "schema": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string",
            "description": "The code of the error that has occurred. This field may not be returned for some errors."
          },
          "errorMessage": {
            "type": "string",
            "description": "The human-readable description of the error that has occurred."
          }
        }
      }
    },
    "404": {
      "description": "Not Found. The client has attempted to access an entity that does not exist.",
      "headers": {
        "RequestID": {
          "description": "The unique identifier generated for the request",
          "type": "string"
        }
      },
      "schema": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string",
            "description": "The code of the error that has occurred. This field may not be returned for some errors."
          },
          "errorMessage": {
            "type": "string",
            "description": "The human-readable description of the error that has occurred."
          }
        }
      }
    },
    "405": {
      "description": "Method Not Allowed. The client has attempted to access an endpoint using an HTTP method that is not supported.",
      "headers": {
        "RequestID": {
          "description": "The unique identifier generated for the request",
          "type": "string"
        }
      },
      "schema": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string",
            "description": "The code of the error that has occurred. This field may not be returned for some errors."
          },
          "errorMessage": {
            "type": "string",
            "description": "The human-readable description of the error that has occurred."
          }
        }
      }
    },
    "416": {
      "description": "Range Not Satisfiable. The client has specified a range that is invalid or cannot be processed.",
      "headers": {
        "RequestID": {
          "description": "The unique identifier generated for the request",
          "type": "string"
        }
      },
      "schema": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string",
            "description": "The code of the error that has occurred. This field may not be returned for some errors."
          },
          "errorMessage": {
            "type": "string",
            "description": "The human-readable description of the error that has occurred."
          }
        }
      }
    }
  }
}
